// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://superplatform.ai/",
            "email": "sales@singulatron.com"
        },
        "license": {
            "name": "AGPL v3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/chat-svc/events": {
            "get": {
                "description": "Events is a dummy endpoint to display documentation about the events that this service emits.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Events",
                "operationId": "events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.EventThreadUpdate"
                        }
                    }
                }
            }
        },
        "/chat-svc/message/{messageId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific message from a chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Delete a Message",
                "operationId": "deleteMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new chat thread and add the requesting user to it.\nRequires the ` + "`" + `chat-svc:thread:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Add Thread",
                "operationId": "addThread",
                "parameters": [
                    {
                        "description": "Add Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully created",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch information about a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Get Thread",
                "operationId": "getThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Modify the details of a specific chat thread",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Update Thread",
                "operationId": "updateThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Thread Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.UpdateThreadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully updated",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddThreadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific chat thread by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Delete a Thread",
                "operationId": "deleteThread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}/message": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new message to a specific thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Add Message",
                "operationId": "addMessage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add Message Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat_svc.AddMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully added",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/thread/{threadId}/messages": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch messages (and associated assets) for a specific chat thread.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "List Messages",
                "operationId": "getMessages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages and assets successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetMessagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/chat-svc/threads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch all chat threads associated with a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Svc"
                ],
                "summary": "Get Threads",
                "operationId": "getThreads",
                "parameters": [
                    {
                        "description": "Get Threads Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Threads successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/chat_svc.GetThreadsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config-svc/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch the current configuration from the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Svc"
                ],
                "summary": "Get Config",
                "operationId": "getConfig",
                "responses": {
                    "200": {
                        "description": "Current configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/config_svc.GetConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save the provided configuration to the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config Svc"
                ],
                "summary": "Save Config",
                "operationId": "saveConfig",
                "parameters": [
                    {
                        "description": "Save Config Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/config_svc.SaveConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Save Config Response",
                        "schema": {
                            "$ref": "#/definitions/config_svc.SaveConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/deploy-svc/deployment": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save a deployment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Svc"
                ],
                "summary": "Save Deployment",
                "operationId": "saveDeployment",
                "parameters": [
                    {
                        "description": "Save Deploys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.SaveDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.SaveDeploymentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deploy-svc/deployments": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of deployments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Svc"
                ],
                "summary": "List Deployments",
                "operationId": "listDeployments",
                "parameters": [
                    {
                        "description": "List Deploys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ListDeploymentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ListDeploymentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/deploy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-svc/container": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Launches a Docker container with the specified parameters.\n\nRequires the ` + "`" + `docker-svc:docker:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Svc"
                ],
                "summary": "Launch a Container",
                "operationId": "launchContainer",
                "parameters": [
                    {
                        "description": "Launch Container Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/docker_svc.LaunchContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.LaunchContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-svc/container/{hash}/is-running": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a Docker container identified by the hash is running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Svc"
                ],
                "summary": "Check If a Container Is Running",
                "operationId": "isRunning",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ContainerIsRunningResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-svc/container/{hash}/summary/{numberOfLines}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a summary of the Docker container identified by the hash, limited to a specified number of lines",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Svc"
                ],
                "summary": "Get Container Summary",
                "operationId": "getContainerSummary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container Hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of Lines",
                        "name": "numberOfLines",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.GetContainerSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-svc/host": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve information about the Docker host",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Svc"
                ],
                "summary": "Get Docker Host",
                "operationId": "getHost",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.GetDockerHostResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/docker-svc/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information about the Docker service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Docker Svc"
                ],
                "summary": "Get Docker Service Information",
                "operationId": "getInfo",
                "responses": {
                    "200": {
                        "description": "Service Information",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.GetInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docker_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/download-svc/download": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a download for a specified URL.\n\nRequires the ` + "`" + `download-svc:download:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Svc"
                ],
                "summary": "Download a File",
                "operationId": "download",
                "parameters": [
                    {
                        "description": "Download Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/download_svc.DownloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Download initiated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/download_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/download_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/download_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/download-svc/download/{downloadId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a download by ID.\n\nRequires the ` + "`" + `download-svc:download:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Svc"
                ],
                "summary": "Get a Download",
                "operationId": "getDownload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Download ID",
                        "name": "downloadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/download_svc.GetDownloadResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download-svc/download/{downloadId}/pause": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pause a download that is currently in progress.\n\nRequires the ` + "`" + `download-svc:download:edit` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Svc"
                ],
                "summary": "Pause a Download",
                "operationId": "pause",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Download ID",
                        "name": "downloadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/download-svc/downloads": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a list of all download details.\n\nRequires the ` + "`" + `download-svc:download:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Download Svc"
                ],
                "summary": "List Downloads",
                "operationId": "listDownloads",
                "responses": {
                    "200": {
                        "description": "List of downloads",
                        "schema": {
                            "$ref": "#/definitions/download_svc.DownloadsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dynamic-svc/object": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new object with the provided details. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dynamic Svc"
                ],
                "summary": "Create a Generic Object",
                "operationId": "createObject",
                "parameters": [
                    {
                        "description": "Create request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.CreateObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.CreateObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dynamic-svc/object/{objectId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dynamic Svc"
                ],
                "summary": "Upsert a Generic Object",
                "operationId": "upsertObject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object ID",
                        "name": "objectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upsert request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.UpsertObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful creation or update of object",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.UpsertObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dynamic-svc/objects": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves objects from a specified table based on search criteria.\nRequires authorization and user authentication.\n\n\nUse helper functions in your respective client library such as condition constructors (` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dynamic Svc"
                ],
                "summary": "Query Objects",
                "operationId": "query",
                "parameters": [
                    {
                        "description": "Query Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of objects",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.QueryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dynamic-svc/objects/delete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dynamic Svc"
                ],
                "summary": "Delete a Generic Object",
                "operationId": "deleteObjects",
                "parameters": [
                    {
                        "description": "Delete request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.DeleteObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deletion of object",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.DeleteObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dynamic-svc/objects/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dynamic Svc"
                ],
                "summary": "Update Objects",
                "operationId": "updateObjects",
                "parameters": [
                    {
                        "description": "Update request payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.UpdateObjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful update of objects",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.UpdateObjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dynamic_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/firehose-svc/event": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publishes an event to the firehose service after authorization check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Firehose Svc"
                ],
                "summary": "Publish an Event",
                "operationId": "publishEvent",
                "parameters": [
                    {
                        "description": "Event to publish",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.EventPublishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}"
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/firehose-svc/events/subscribe": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establish a subscription to the firehose events and accept a real time stream of them.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Firehose Svc"
                ],
                "summary": "Subscribe to the Event Stream",
                "operationId": "subscribeToEvents",
                "responses": {
                    "200": {
                        "description": "Event data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/firehose_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/default-model/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts The Default Model.\n\nRequires the ` + "`" + `model-svc:model:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Start the Default Model",
                "operationId": "startDefaultModel",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/default-model/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the status of the default model.\n\nRequires the ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get Default Model Status",
                "operationId": "getDefaultModelStatus",
                "responses": {
                    "200": {
                        "description": "Model status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a model by its ID.\n\nthe Requires ` + "`" + `model.view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get a Model",
                "operationId": "getModel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.GetModelResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/make-default": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets a model as the default model — when prompts are sent without a Model ID, the default model is used.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Make a Model Default",
                "operationId": "makeDefault",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.MakeDefaultResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Starts a model by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Start a Model",
                "operationId": "startModel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/model-svc/model/{modelId}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the status of a model by ID.\n\nRequires the ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "Get Model Status",
                "operationId": "getModelStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model_svc.StatusResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/model-svc/models": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of models.\n\nRequires ` + "`" + `model-svc:model:view` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Model Svc"
                ],
                "summary": "List Models",
                "operationId": "listModels",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/policy-svc/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check records a resource access and returns if the access is allowed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy Svc"
                ],
                "summary": "Check",
                "operationId": "check",
                "parameters": [
                    {
                        "description": "Check Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy_svc.CheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checked successfully",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.CheckResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/policy-svc/instance/{instanceId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows user to upsert a new policy instance based on a template.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy Svc"
                ],
                "summary": "Upsert an Instance",
                "operationId": "upsertInstance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance ID",
                        "name": "instanceId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Upsert Instance Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy_svc.UpsertInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance upserted successfully",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.UpsertInstanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/policy_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompt": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new prompt to the prompt queue and either waits for the response (if ` + "`" + `sync` + "`" + ` is set to true), or returns immediately.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Add Prompt",
                "operationId": "addPrompt",
                "parameters": [
                    {
                        "description": "Add Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.AddPromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.AddPromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompts": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List prompts that satisfy a query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "List Prompts",
                "operationId": "listPrompts",
                "parameters": [
                    {
                        "description": "List Prompts Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ListPromptsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ListPromptsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/prompts/{threadId}/responses/subscribe": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribe to prompt responses by thread via Server-Sent Events (SSE)",
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Subscribe to Prompt Responses by Thread",
                "operationId": "subscribeToPromptResponses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "threadId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streaming response",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing threadId parameter",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/prompt-svc/remove": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a prompt by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prompt Svc"
                ],
                "summary": "Remove Prompt",
                "operationId": "removePrompt",
                "parameters": [
                    {
                        "description": "Remove Prompt Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.RemovePromptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{}",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.RemovePromptResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/prompt_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/nodes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of nodes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "List Nodes",
                "operationId": "listNodes",
                "parameters": [
                    {
                        "description": "List Registrys Request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListNodesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/service-definition": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new service definition, associating an service definition address with a slug acquired from the bearer token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Register Service Definition",
                "operationId": "saveServiceDefinition",
                "parameters": [
                    {
                        "description": "Register Service Definition Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registry_svc.SaveServiceDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.SaveServiceDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/service-definition/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a registered service definition based on the service ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Delete Service Definition",
                "operationId": "deleteServiceDefinition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Definition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/service-instance": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Register Service Instance",
                "operationId": "registerServiceInstance",
                "parameters": [
                    {
                        "description": "Register Service Instance Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registry_svc.RegisterServiceInstanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.RegisterServiceInstanceResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/service-instance/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a registered service instance based on the service ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "Remove Service Instance",
                "operationId": "removeServiceInstance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service Instance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/registry-svc/services": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registry Svc"
                ],
                "summary": "List Service Instances",
                "operationId": "queryServiceInstances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scheme to filter by",
                        "name": "scheme",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP to filter by",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Host to filter by",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "IP to filter by",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Id to filter by",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ListServiceInstancesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid filters",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/registry_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to change their own password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Change User Password",
                "operationId": "changePassword",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/change-password-admin": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an administrator to change a user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Change User Password (Admin)",
                "operationId": "changePasswordAdmin",
                "parameters": [
                    {
                        "description": "Change Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ChangePasswordAdminResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/login": {
            "post": {
                "description": "Authenticates a user and returns a token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/user_svc.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization.\nThe initiating user will receive a dynamic role in the format ` + "`" + `user-svc:org:{organizationId}:admin` + "`" + `, where ` + "`" + `$organization-slug` + "`" + ` is a unique identifier for the created organization.\nDynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create an Organization",
                "operationId": "createOrganization",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization/{organizationId}/user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Add a User to an Organization",
                "operationId": "addUserToOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organizationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add User to Organization Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.AddUserToOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.AddUserToOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization/User not found",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/organization/{organizationId}/user/{userId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Remove a User from an Organization",
                "operationId": "removeUserFromOrganization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organizationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Add User to Organization Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RemoveUserFromOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RemoveUserFromOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization/User not found",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/permission/{permissionId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates or updates a permission.\n\u003cb\u003eThe permission ID must be prefixed by the callers username (email).\u003c/b\u003e\nEg. if the owner's email/username is ` + "`" + `petstore-svc` + "`" + ` the permission should look like ` + "`" + `petstore-svc:pet:edit` + "`" + `.\n\nRequires the ` + "`" + `user-svc:permission:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Upsert a Permission",
                "operationId": "upsertPermission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission Details",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.UpserPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid JSON or Bad Namespace",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/permission/{permissionId}/is-authorized": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a user is authorized for a specific permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Is Authorized",
                "operationId": "isAuthorized",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Is Authorized Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.IsAuthorizedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.IsAuthorizedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing permission id",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/public-key": {
            "get": {
                "description": "Get the public key to descrypt the JWT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get Public Key",
                "operationId": "getPublicKey",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetPublicKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON or missing permission id",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/register": {
            "post": {
                "description": "Register a new user with a name, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Register",
                "operationId": "register",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role.\n\u003cb\u003eThe role ID must be prefixed by the callers username (email).\u003c/b\u003e\nEg. if the owner's slug is ` + "`" + `petstore-svc` + "`" + ` the role should look like ` + "`" + `petstore-svc:admin` + "`" + `.\nThe user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.\n\nRequires the ` + "`" + `user-svc:role:create` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create a New Role",
                "operationId": "createRole",
                "parameters": [
                    {
                        "description": "Create Role Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/role/{roleId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a role based on the role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Delete a Role",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.DeleteRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/role/{roleId}/permission/{permissionId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a specific permission to a role identified by roleId.\n\nRequires the ` + "`" + `user-svc:permission:assign` + "`" + ` permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Add Permission to Role",
                "operationId": "addPermissionToRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission ID",
                        "name": "permissionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/role/{roleId}/permissions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve permissions associated with a specific role ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get Permissions by Role",
                "operationId": "getPermissionsByRole",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetPermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set permissions for a specified role. The caller can add permissions it owns to any role.\nIf the caller tries to add a permission it doesn't own to a role, ` + "`" + `StatusBadRequest` + "`" + ` will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Set Role Permissions",
                "operationId": "setRolePermission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Set Role Permissions Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SetRolePermissionsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SetRolePermissionsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all roles from the user service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Get all Roles",
                "operationId": "getRoles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetRolesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated administrator to create a new user with specified details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Create a New User",
                "operationId": "createUser",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/user/by-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve user information based on an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Read User by Token",
                "operationId": "readUserByToken",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ReadUserByTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Token Missing",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-svc/user/{userId}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Save user profile information based on the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Save User Profile",
                "operationId": "saveUserProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Save Profile Request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.SaveProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user based on the user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "Delete a User",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user_svc.DeleteUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user-svc/users": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches a list of users with optional query filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Svc"
                ],
                "summary": "List Users",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "description": "Get Users Request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/user_svc.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/user_svc.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "chat_svc.AddMessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "$ref": "#/definitions/chat_svc.Message"
                }
            }
        },
        "chat_svc.AddThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.AddThreadResponse": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.Asset": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the base64 encoded binary file direcly embedded in the asset itself",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "description": "Url of the asset where",
                    "type": "string"
                }
            }
        },
        "chat_svc.EventMessageAdded": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.EventThreadAdded": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.EventThreadUpdate": {
            "type": "object",
            "properties": {
                "threadId": {
                    "type": "string"
                }
            }
        },
        "chat_svc.GetMessagesResponse": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat_svc.Asset"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat_svc.Message"
                    }
                }
            }
        },
        "chat_svc.GetThreadResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "chat_svc.GetThreadsRequest": {
            "type": "object"
        },
        "chat_svc.GetThreadsResponse": {
            "type": "object",
            "properties": {
                "threads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat_svc.Thread"
                    }
                }
            }
        },
        "chat_svc.Message": {
            "type": "object",
            "properties": {
                "assetIds": {
                    "description": "AssetIds defines the attachments the message has.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "description": "Content of the message eg. \"Hi, what's up?\"",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "threadId": {
                    "description": "ThreadId of the message.",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "description": "UserId is the id of the user who wrote the message.\nFor AI messages this field is empty.",
                    "type": "string"
                }
            }
        },
        "chat_svc.Thread": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "description": "Title of the thread.",
                    "type": "string"
                },
                "topicIds": {
                    "description": "TopicIds defines which topics the thread belongs to.\nTopics can roughly be thought of as tags for threads.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "userIds": {
                    "description": "UserIds the ids of the users who can see this thread.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "chat_svc.UpdateThreadRequest": {
            "type": "object",
            "properties": {
                "thread": {
                    "$ref": "#/definitions/chat_svc.Thread"
                }
            }
        },
        "config_svc.AppServiceConfig": {
            "type": "object",
            "properties": {
                "loggingDisabled": {
                    "type": "boolean"
                }
            }
        },
        "config_svc.Config": {
            "type": "object",
            "properties": {
                "app": {
                    "$ref": "#/definitions/config_svc.AppServiceConfig"
                },
                "directory": {
                    "type": "string"
                },
                "download": {
                    "$ref": "#/definitions/config_svc.DownloadServiceConfig"
                },
                "isRuntimeInstalled": {
                    "description": "* This flag drives a minor UX feature:\n\t * if the user has not installed the runtime we show an INSTALL\n\t * button, but if the user has already installed the runtime we show\n\t * we show a START runtime button.\n\t *",
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/config_svc.ModelServiceConfig"
                }
            }
        },
        "config_svc.DownloadServiceConfig": {
            "type": "object",
            "properties": {
                "downloadFolder": {
                    "type": "string"
                }
            }
        },
        "config_svc.GetConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/config_svc.Config"
                }
            }
        },
        "config_svc.ModelServiceConfig": {
            "type": "object",
            "properties": {
                "currentModelId": {
                    "type": "string"
                }
            }
        },
        "config_svc.SaveConfigRequest": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/config_svc.Config"
                }
            }
        },
        "config_svc.SaveConfigResponse": {
            "type": "object"
        },
        "datastore.Filter": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonValues": {
                    "description": "JSONValues is a JSON marshalled array of values.\nIt's JSON marhalled due to the limitations of the\nSwaggo -\u003e OpenAPI 2.0 -\u003e OpenAPI Go generator toolchain.",
                    "type": "string"
                },
                "op": {
                    "$ref": "#/definitions/datastore.Op"
                }
            }
        },
        "datastore.Op": {
            "type": "string",
            "enum": [
                "equals",
                "containsSubstring",
                "startsWith",
                "intersects",
                "isInList"
            ],
            "x-enum-varnames": [
                "OpEquals",
                "OpContainsSubstring",
                "OpStartsWith",
                "OpIntersects",
                "OpIsInList"
            ]
        },
        "datastore.OrderBy": {
            "type": "object",
            "properties": {
                "desc": {
                    "description": "Desc indicates whether the sorting should be in descending order.",
                    "type": "boolean"
                },
                "field": {
                    "description": "The field by which to order the results",
                    "type": "string"
                },
                "randomize": {
                    "description": "Randomize indicates that the results should be randomized instead of ordered by the ` + "`" + `field` + "`" + ` and ` + "`" + `desc` + "`" + ` criteria",
                    "type": "boolean"
                }
            }
        },
        "datastore.Query": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Count true means return the count of the dataset filtered by Filters\nwithout after or limit.",
                    "type": "boolean"
                },
                "filters": {
                    "description": "Filters are filtering options of a query. It is advised to use\nIt's advised to use helper functions in your respective client library such as filter constructors (` + "`" + `all` + "`" + `, ` + "`" + `equal` + "`" + `, ` + "`" + `contains` + "`" + `, ` + "`" + `startsWith` + "`" + `) and field selectors (` + "`" + `field` + "`" + `, ` + "`" + `fields` + "`" + `, ` + "`" + `id` + "`" + `) for easier access.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "jsonAfter": {
                    "description": "JSONAfter is used for cursor-based pagination, which is more\neffective in scalable and distributed environments compared\nto offset-based pagination.\n\nJSONAfter is a JSON encoded string due to limitations of Swaggo (ie. []interface{} generates []map[stirng]interface{}).",
                    "type": "string"
                },
                "limit": {
                    "description": "Limit the number of records in the result set.",
                    "type": "integer"
                },
                "orderBys": {
                    "description": "OrderBys order the result set.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.OrderBy"
                    }
                }
            }
        },
        "deploy_svc.AutoScalingConfig": {
            "type": "object",
            "properties": {
                "cpuThreshold": {
                    "description": "CPU usage threshold for scaling (as a percentage)",
                    "type": "integer"
                },
                "maxReplicas": {
                    "description": "Maximum number of replicas to run",
                    "type": "integer"
                },
                "minReplicas": {
                    "description": "Minimum number of replicas to run",
                    "type": "integer"
                }
            }
        },
        "deploy_svc.Deployment": {
            "type": "object",
            "required": [
                "serviceSlug"
            ],
            "properties": {
                "autoScaling": {
                    "description": "Optional: Auto-scaling rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.AutoScalingConfig"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the deployment (e.g., \"depl_dbOdi5eLQK\")",
                    "type": "string",
                    "example": "depl_dbOdi5eLQK"
                },
                "replicas": {
                    "description": "Number of container instances to run",
                    "type": "integer"
                },
                "resources": {
                    "description": "Resource requirements for each replica",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.ResourceLimits"
                        }
                    ]
                },
                "serviceSlug": {
                    "description": "The User Svc slug of the service that is being deployed.",
                    "type": "string",
                    "example": "user-svc"
                },
                "strategy": {
                    "description": "Deployment strategy (e.g., rolling update)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.DeploymentStrategy"
                        }
                    ]
                },
                "targetRegions": {
                    "description": "Target deployment regions or clusters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploy_svc.TargetRegion"
                    }
                }
            }
        },
        "deploy_svc.DeploymentStrategy": {
            "type": "object",
            "properties": {
                "maxSurge": {
                    "description": "Max extra replicas during update",
                    "type": "integer"
                },
                "maxUnavailable": {
                    "description": "Max unavailable replicas during update",
                    "type": "integer"
                },
                "type": {
                    "description": "Deployment strategy type (RollingUpdate, Recreate, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deploy_svc.StrategyType"
                        }
                    ]
                }
            }
        },
        "deploy_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "deploy_svc.ListDeploymentsRequest": {
            "type": "object"
        },
        "deploy_svc.ListDeploymentsResponse": {
            "type": "object",
            "properties": {
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deploy_svc.Deployment"
                    }
                }
            }
        },
        "deploy_svc.ResourceLimits": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU limit, e.g., \"500m\" for 0.5 cores",
                    "type": "string"
                },
                "memory": {
                    "description": "Memory limit, e.g., \"128Mi\"",
                    "type": "string"
                },
                "vram": {
                    "description": "Optional: GPU VRAM requirement, e.g., \"48GB\"",
                    "type": "string"
                }
            }
        },
        "deploy_svc.SaveDeploymentRequest": {
            "type": "object",
            "properties": {
                "deployment": {
                    "$ref": "#/definitions/deploy_svc.Deployment"
                }
            }
        },
        "deploy_svc.SaveDeploymentResponse": {
            "type": "object"
        },
        "deploy_svc.StrategyType": {
            "type": "string",
            "enum": [
                "RollingUpdate",
                "Recreate"
            ],
            "x-enum-varnames": [
                "StrategyRollingUpdate",
                "StrategyRecreate"
            ]
        },
        "deploy_svc.TargetRegion": {
            "type": "object",
            "properties": {
                "cluster": {
                    "description": "Cluster or node where service should be deployed (e.g., \"us-west1\", \"local-docker\")",
                    "type": "string"
                },
                "zone": {
                    "description": "Optional: Specific zone for the deployment",
                    "type": "string"
                }
            }
        },
        "docker_svc.ContainerIsRunningResponse": {
            "type": "object",
            "properties": {
                "isRunning": {
                    "type": "boolean"
                }
            }
        },
        "docker_svc.DockerInfo": {
            "type": "object",
            "properties": {
                "dockerDaemonAddress": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "hasDocker": {
                    "type": "boolean"
                }
            }
        },
        "docker_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "docker_svc.GetContainerSummaryResponse": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "string"
                }
            }
        },
        "docker_svc.GetDockerHostResponse": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "docker_svc.GetInfoResponse": {
            "type": "object",
            "properties": {
                "info": {
                    "$ref": "#/definitions/docker_svc.DockerInfo"
                }
            }
        },
        "docker_svc.LaunchContainerOptions": {
            "type": "object",
            "properties": {
                "assets": {
                    "description": "Assets maps environment variable names to file URLs.\nExample: {\"MODEL\": \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q2_K.gguf\"}\nThese files are downloaded by the Download Svc and mounted in the container.\nThe environment variable ` + "`" + `MODEL` + "`" + ` will point to the local file path in the container.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "envs": {
                    "description": "Envs are environment variables to set in the container",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gpuEnabled": {
                    "description": "GPUEnabled specifies if GPU support is enabled",
                    "type": "boolean"
                },
                "hash": {
                    "description": "Hash is a unique identifier for the container",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are metadata labels associated with the container",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the container",
                    "type": "string"
                },
                "persistentPaths": {
                    "description": "PersistentPaths are paths that should be persisted across container restarts",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "docker_svc.LaunchContainerRequest": {
            "type": "object",
            "required": [
                "image",
                "port"
            ],
            "properties": {
                "hostPort": {
                    "description": "HostPort is the port on the host machine that will be mapped to the container's port",
                    "type": "integer",
                    "example": 8081
                },
                "image": {
                    "description": "Image is the Docker image to use for the container",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "options": {
                    "description": "Options provides additional options for launching the container",
                    "allOf": [
                        {
                            "$ref": "#/definitions/docker_svc.LaunchContainerOptions"
                        }
                    ]
                },
                "port": {
                    "description": "Port is the port number that the container will expose",
                    "type": "integer",
                    "example": 8080
                }
            }
        },
        "docker_svc.LaunchContainerResponse": {
            "type": "object",
            "properties": {
                "info": {
                    "$ref": "#/definitions/docker_svc.LaunchInfo"
                }
            }
        },
        "docker_svc.LaunchInfo": {
            "type": "object",
            "properties": {
                "newContainerStarted": {
                    "type": "boolean"
                },
                "portNumber": {
                    "type": "integer"
                }
            }
        },
        "download_svc.DownloadDetails": {
            "type": "object",
            "properties": {
                "cancelled": {
                    "type": "boolean"
                },
                "dir": {
                    "type": "string"
                },
                "downloadedBytes": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "fullFileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "paused": {
                    "type": "boolean"
                },
                "progress": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "download_svc.DownloadRequest": {
            "type": "object",
            "properties": {
                "folderPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "download_svc.DownloadsResponse": {
            "type": "object",
            "properties": {
                "downloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/download_svc.DownloadDetails"
                    }
                }
            }
        },
        "download_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "download_svc.GetDownloadResponse": {
            "type": "object",
            "properties": {
                "download": {
                    "$ref": "#/definitions/download_svc.DownloadDetails"
                },
                "exists": {
                    "type": "boolean"
                }
            }
        },
        "dynamic_svc.CreateObjectRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/dynamic_svc.ObjectCreateFields"
                }
            }
        },
        "dynamic_svc.CreateObjectResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/dynamic_svc.Object"
                }
            }
        },
        "dynamic_svc.DeleteObjectRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "dynamic_svc.DeleteObjectResponse": {
            "type": "object"
        },
        "dynamic_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dynamic_svc.Object": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "authors": {
                    "description": "Authors is a list of user ID and organization ID who created the object.\nIf an organization ID is not provided, the currently active organization will\nbe queried from the User Svc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "deleters": {
                    "description": "Deleters is a list of user IDs and role IDs that can delete the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "readers": {
                    "description": "Readers is a list of user IDs and role IDs that can read the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "table": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "writers": {
                    "description": "Writers is a list of user IDs and role IDs that can write the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dynamic_svc.ObjectCreateFields": {
            "type": "object",
            "required": [
                "data",
                "table"
            ],
            "properties": {
                "authors": {
                    "description": "Authors is a list of user ID and organization ID who created the object.\nIf an organization ID is not provided, the currently active organization will\nbe queried from the User Svc.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"usr_12345\"",
                        " \"org_67890\"]"
                    ]
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "deleters": {
                    "description": "Deleters is a list of user IDs and role IDs that can delete the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "readers": {
                    "description": "Readers is a list of user IDs and role IDs that can read the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "table": {
                    "type": "string"
                },
                "writers": {
                    "description": "Writers is a list of user IDs and role IDs that can write the object.\n` + "`" + `_self` + "`" + ` can be used to refer to the caller user's userId and\n` + "`" + `_org` + "`" + ` can be used to refer to the user's currently active organization (if exists).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dynamic_svc.QueryRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                },
                "readers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "dynamic_svc.QueryResponse": {
            "type": "object",
            "properties": {
                "objects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dynamic_svc.Object"
                    }
                }
            }
        },
        "dynamic_svc.UpdateObjectRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/datastore.Filter"
                    }
                },
                "object": {
                    "$ref": "#/definitions/dynamic_svc.Object"
                },
                "table": {
                    "type": "string"
                }
            }
        },
        "dynamic_svc.UpdateObjectResponse": {
            "type": "object"
        },
        "dynamic_svc.UpsertObjectRequest": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/dynamic_svc.ObjectCreateFields"
                }
            }
        },
        "dynamic_svc.UpsertObjectResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/dynamic_svc.Object"
                }
            }
        },
        "firehose_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "firehose_svc.Event": {
            "type": "object",
            "properties": {
                "data": {},
                "name": {
                    "type": "string"
                }
            }
        },
        "firehose_svc.EventPublishRequest": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/firehose_svc.Event"
                }
            }
        },
        "model_svc.Architectures": {
            "type": "object",
            "properties": {
                "cuda": {
                    "$ref": "#/definitions/model_svc.Container"
                },
                "default": {
                    "$ref": "#/definitions/model_svc.Container"
                }
            }
        },
        "model_svc.Container": {
            "type": "object",
            "properties": {
                "envars": {
                    "description": "Envars passed to the container. eg.\n\t'DEVICES=all'",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "persistentPaths": {
                    "description": "Paths in the container to persist.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "port": {
                    "description": "Port is the internal port of the Container",
                    "type": "integer"
                }
            }
        },
        "model_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model_svc.GetModelResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                },
                "model": {
                    "$ref": "#/definitions/model_svc.Model"
                },
                "platform": {
                    "$ref": "#/definitions/model_svc.Platform"
                }
            }
        },
        "model_svc.ListResponse": {
            "type": "object",
            "properties": {
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model_svc.Model"
                    }
                }
            }
        },
        "model_svc.MakeDefaultResponse": {
            "type": "object"
        },
        "model_svc.Model": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bits": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "flavour": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxBits": {
                    "type": "integer"
                },
                "maxRam": {
                    "type": "number"
                },
                "mirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "string"
                },
                "platformId": {
                    "type": "string"
                },
                "promptTemplate": {
                    "type": "string"
                },
                "quality": {
                    "type": "string"
                },
                "quantComment": {
                    "type": "string"
                },
                "size": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uncensored": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model_svc.ModelStatus": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "assetsReady": {
                    "type": "boolean"
                },
                "running": {
                    "description": "Running triggers onModelLaunch on the frontend.\n\tRunning is true when the model is both running and answering\n\t- fully loaded.",
                    "type": "boolean"
                }
            }
        },
        "model_svc.Platform": {
            "type": "object",
            "properties": {
                "architectures": {
                    "$ref": "#/definitions/model_svc.Architectures"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "model_svc.StartResponse": {
            "type": "object"
        },
        "model_svc.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/model_svc.ModelStatus"
                }
            }
        },
        "policy_svc.BlocklistParameters": {
            "type": "object",
            "properties": {
                "blockedIPs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "policy_svc.CheckRequest": {
            "type": "object",
            "properties": {
                "endpoint": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "policy_svc.CheckResponse": {
            "type": "object",
            "required": [
                "allowed"
            ],
            "properties": {
                "allowed": {
                    "type": "boolean"
                }
            }
        },
        "policy_svc.Entity": {
            "type": "string",
            "enum": [
                "userId",
                "ip"
            ],
            "x-enum-varnames": [
                "EntityUserID",
                "EntityIP"
            ]
        },
        "policy_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "policy_svc.Instance": {
            "type": "object",
            "required": [
                "templateId"
            ],
            "properties": {
                "blocklistParameters": {
                    "$ref": "#/definitions/policy_svc.BlocklistParameters"
                },
                "endpoint": {
                    "type": "string",
                    "example": "/user-svc/register"
                },
                "id": {
                    "type": "string"
                },
                "rateLimitParameters": {
                    "$ref": "#/definitions/policy_svc.RateLimitParameters"
                },
                "templateId": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.TemplateId"
                        }
                    ],
                    "example": "rate-limit"
                }
            }
        },
        "policy_svc.RateLimitParameters": {
            "type": "object",
            "properties": {
                "entity": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.Entity"
                        }
                    ],
                    "example": "userId"
                },
                "maxRequests": {
                    "type": "integer",
                    "example": 10
                },
                "scope": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/policy_svc.Scope"
                        }
                    ],
                    "example": "endpoint"
                },
                "timeWindow": {
                    "type": "string",
                    "example": "1m"
                }
            }
        },
        "policy_svc.Scope": {
            "type": "string",
            "enum": [
                "endpoint",
                "global"
            ],
            "x-enum-varnames": [
                "ScopeEndpoint",
                "ScopeGlobal"
            ]
        },
        "policy_svc.TemplateId": {
            "type": "string",
            "enum": [
                "rate-limit",
                "blocklist"
            ],
            "x-enum-varnames": [
                "TemplateIdRateLimit",
                "TemplateIdBlocklist"
            ]
        },
        "policy_svc.UpsertInstanceRequest": {
            "type": "object",
            "properties": {
                "instance": {
                    "$ref": "#/definitions/policy_svc.Instance"
                }
            }
        },
        "policy_svc.UpsertInstanceResponse": {
            "type": "object"
        },
        "prompt_svc.AddPromptRequest": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                }
            }
        },
        "prompt_svc.AddPromptResponse": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "prompt": {
                    "$ref": "#/definitions/prompt_svc.Prompt"
                }
            }
        },
        "prompt_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "prompt_svc.ListPromptsRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "prompt_svc.ListPromptsResponse": {
            "type": "object",
            "properties": {
                "after": {},
                "count": {
                    "type": "integer"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/prompt_svc.Prompt"
                    }
                }
            }
        },
        "prompt_svc.Prompt": {
            "type": "object",
            "required": [
                "prompt"
            ],
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is the time of the prompt creation.",
                    "type": "string"
                },
                "error": {
                    "description": "Error that arose during prompt execution, if any.",
                    "type": "string"
                },
                "id": {
                    "description": "Id is the unique ID of the prompt.",
                    "type": "string"
                },
                "lastRun": {
                    "description": "LastRun is the time of the last prompt run.",
                    "type": "string"
                },
                "maxRetries": {
                    "description": "MaxRetries specified how many times the system should retry a prompt when it keeps erroring.",
                    "type": "integer",
                    "example": 10
                },
                "modelId": {
                    "description": "ModelId is just the Singulatron internal ID of the model.",
                    "type": "string",
                    "example": "huggingface/TheBloke/mistral-7b-instruct-v0.2.Q3_K_S.gguf"
                },
                "prompt": {
                    "description": "Prompt is the message itself eg. \"What's a banana?",
                    "type": "string",
                    "example": "What's a banana?"
                },
                "runCount": {
                    "description": "RunCount is the number of times the prompt was retried due to errors",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the prompt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/prompt_svc.PromptStatus"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync drives whether prompt add request should wait and hang until\nthe prompt is done executing. By default the prompt just gets put on a queue\nand the client will just subscribe to a Thread Stream.\nFor quick and dirty scripting however it's often times easier to do things syncronously.\nIn those cases set Sync to true.",
                    "type": "boolean"
                },
                "template": {
                    "description": "Template of the prompt. Optional. If not present it's derived from ModelId.",
                    "type": "string",
                    "example": "[INST]{prompt}[/INST]"
                },
                "threadId": {
                    "description": "ThreadId is the ID of the thread a prompt belongs to.\nClients subscribe to Thread Streams to see the answer to a prompt,\nor set ` + "`" + `prompt.sync` + "`" + ` to true for a blocking answer.",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the last time the prompt was updated.",
                    "type": "string"
                },
                "userId": {
                    "description": "UserId contains the ID of the user who submitted the prompt.",
                    "type": "string"
                }
            }
        },
        "prompt_svc.PromptStatus": {
            "type": "string",
            "enum": [
                "scheduled",
                "running",
                "completed",
                "errored",
                "abandoned",
                "canceled"
            ],
            "x-enum-varnames": [
                "PromptStatusScheduled",
                "PromptStatusRunning",
                "PromptStatusCompleted",
                "PromptStatusErrored",
                "PromptStatusAbandoned",
                "PromptStatusCanceled"
            ]
        },
        "prompt_svc.RemovePromptRequest": {
            "type": "object",
            "properties": {
                "promptId": {
                    "type": "string"
                }
            }
        },
        "prompt_svc.RemovePromptResponse": {
            "type": "object"
        },
        "registry_svc.APISpec": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Additional metadata about the API (e.g., author, license, etc.)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "protocolType": {
                    "description": "Protocol type (e.g., OpenAPI, Swagger, etc.)",
                    "type": "string"
                },
                "url": {
                    "description": "URL to the OpenAPI file or other API definition",
                    "type": "string"
                },
                "version": {
                    "description": "Version of the API specification (e.g., 3.0.0)",
                    "type": "string"
                }
            }
        },
        "registry_svc.Client": {
            "type": "object",
            "required": [
                "language",
                "url"
            ],
            "properties": {
                "language": {
                    "description": "Programming language.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Language"
                        }
                    ],
                    "example": "JavaScript"
                },
                "url": {
                    "description": "The URL of the client.",
                    "type": "string",
                    "example": "https://example.com/client.js"
                }
            }
        },
        "registry_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "registry_svc.GPU": {
            "type": "object",
            "properties": {
                "busId": {
                    "type": "string"
                },
                "computeMode": {
                    "type": "string"
                },
                "gpuUtilization": {
                    "type": "number"
                },
                "id": {
                    "description": "Id Node.URL + IntraNodeId",
                    "type": "string"
                },
                "intraNodeId": {
                    "type": "integer"
                },
                "memoryTotal": {
                    "type": "integer"
                },
                "memoryUsage": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "performanceState": {
                    "type": "string"
                },
                "powerCap": {
                    "type": "number"
                },
                "powerUsage": {
                    "type": "number"
                },
                "processDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Process"
                    }
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "registry_svc.ImageSpec": {
            "type": "object",
            "required": [
                "image",
                "port"
            ],
            "properties": {
                "image": {
                    "description": "Image is the Docker image to use for the container",
                    "type": "string",
                    "example": "nginx:latest"
                },
                "port": {
                    "description": "Port is the port number that the container will expose",
                    "type": "integer",
                    "example": 8080
                }
            }
        },
        "registry_svc.Language": {
            "type": "string",
            "enum": [
                "JavaScript",
                "Python",
                "Java",
                "C#",
                "C++",
                "Ruby",
                "Go",
                "Swift",
                "PHP",
                "TypeScript",
                "Kotlin",
                "Scala",
                "Perl",
                "Rust",
                "Haskell",
                "Clojure",
                "Elixir",
                "Objective-C",
                "F#"
            ],
            "x-enum-varnames": [
                "JavaScript",
                "Python",
                "Java",
                "CSharp",
                "CPlusPlus",
                "Ruby",
                "Go",
                "Swift",
                "PHP",
                "TypeScript",
                "Kotlin",
                "Scala",
                "Perl",
                "Rust",
                "Haskell",
                "Clojure",
                "Elixir",
                "ObjectiveC",
                "FSharp"
            ]
        },
        "registry_svc.ListNodesRequest": {
            "type": "object"
        },
        "registry_svc.ListNodesResponse": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Node"
                    }
                }
            }
        },
        "registry_svc.ListServiceDefinitionsResponse": {
            "type": "object",
            "properties": {
                "serviceDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.ServiceDefinition"
                    }
                }
            }
        },
        "registry_svc.ListServiceInstancesResponse": {
            "type": "object",
            "properties": {
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.ServiceInstance"
                    }
                }
            }
        },
        "registry_svc.Node": {
            "type": "object",
            "properties": {
                "availabilityZone": {
                    "description": "The availability zone of the node",
                    "type": "string"
                },
                "gpus": {
                    "description": "List of GPUs available on the node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.GPU"
                    }
                },
                "lastHeartbeat": {
                    "description": "Last time the instance gave a sign of life",
                    "type": "string"
                },
                "region": {
                    "description": "The region of the node",
                    "type": "string"
                },
                "url": {
                    "description": "URL of the daemon running on the node.\nIf not configured defaults to hostname + default Singulatron daemon port.",
                    "type": "string"
                },
                "usage": {
                    "description": "Resource usage metrics of the node.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.ResourceUsage"
                        }
                    ]
                }
            }
        },
        "registry_svc.Process": {
            "type": "object",
            "properties": {
                "memoryUsage": {
                    "type": "integer"
                },
                "pid": {
                    "type": "integer"
                },
                "processName": {
                    "type": "string"
                }
            }
        },
        "registry_svc.RegisterServiceInstanceRequest": {
            "type": "object",
            "required": [
                "slug"
            ],
            "properties": {
                "host": {
                    "description": "Host of the service instance address. Required if URL is not provided",
                    "type": "string",
                    "example": "myserver.com"
                },
                "ip": {
                    "description": "IP of the service instance address. Optional: to register by IP instead of host",
                    "type": "string",
                    "example": "8.8.8.8"
                },
                "path": {
                    "description": "Path of the service instance address. Optional (e.g., \"/api\")",
                    "type": "string",
                    "example": "/your-svc"
                },
                "port": {
                    "description": "Port of the service instance address. Required if URL is not provided",
                    "type": "integer",
                    "example": 8080
                },
                "scheme": {
                    "description": "Scheme of the service instance address. Required if URL is not provided.",
                    "type": "string",
                    "example": "https"
                },
                "slug": {
                    "description": "The User Svc slug of the service whose instance is being registered.",
                    "type": "string",
                    "example": "user-svc"
                },
                "url": {
                    "description": "Full address URL of the service instance.",
                    "type": "string",
                    "example": "https://myserver.com:5981"
                }
            }
        },
        "registry_svc.RegisterServiceInstanceResponse": {
            "type": "object"
        },
        "registry_svc.ResourceUsage": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                },
                "disk": {
                    "description": "Disk usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                },
                "memory": {
                    "description": "Memory usage metrics.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.Usage"
                        }
                    ]
                }
            }
        },
        "registry_svc.SaveServiceDefinitionRequest": {
            "type": "object",
            "properties": {
                "serviceDefinition": {
                    "$ref": "#/definitions/registry_svc.ServiceDefinition"
                }
            }
        },
        "registry_svc.SaveServiceDefinitionResponse": {
            "type": "object"
        },
        "registry_svc.ServiceDefinition": {
            "type": "object",
            "required": [
                "serviceSlug"
            ],
            "properties": {
                "apiSpecs": {
                    "description": "API Specs such as OpenAPI definitions etc.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.APISpec"
                    }
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry_svc.Client"
                    }
                },
                "image": {
                    "description": "Container specifications for Docker, K8s, etc.                                        // Programming language clients.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/registry_svc.ImageSpec"
                        }
                    ]
                },
                "serviceSlug": {
                    "description": "The User Svc slug of the service whose instance is being registered.",
                    "type": "string",
                    "example": "user-svc"
                }
            }
        },
        "registry_svc.ServiceInstance": {
            "type": "object",
            "required": [
                "id",
                "serviceSlug",
                "url"
            ],
            "properties": {
                "host": {
                    "description": "Host of the service instance address. Required if URL is not provided",
                    "type": "string",
                    "example": "myserver.com"
                },
                "id": {
                    "description": "Required: ID of the service instance",
                    "type": "string",
                    "example": "https://api.com:999/user-svc"
                },
                "ip": {
                    "description": "IP of the service instance address. Optional: to register by IP instead of host",
                    "type": "string",
                    "example": "8.8.8.8"
                },
                "lastHeartbeat": {
                    "description": "Last time the instance gave a sign of life",
                    "type": "string"
                },
                "nodeUrl": {
                    "description": "URL of the Singulatron daemon",
                    "type": "string",
                    "example": "https://myserver.com:58231"
                },
                "path": {
                    "description": "Path of the service instance address. Optional (e.g., \"/api\")",
                    "type": "string",
                    "example": "/your-svc"
                },
                "port": {
                    "description": "Port of the service instance address. Required if URL is not provided",
                    "type": "integer",
                    "example": 8080
                },
                "scheme": {
                    "description": "Scheme of the service instance address. Required if URL is not provided.",
                    "type": "string",
                    "example": "https"
                },
                "serviceSlug": {
                    "description": "The User Svc slug of the service whose instance is being registered.",
                    "type": "string",
                    "example": "user-svc"
                },
                "url": {
                    "description": "Full address URL of the service instance.",
                    "type": "string",
                    "example": "https://myserver.com:5981"
                }
            }
        },
        "registry_svc.Usage": {
            "type": "object",
            "properties": {
                "percent": {
                    "description": "Usage percentage.",
                    "type": "number"
                },
                "total": {
                    "description": "Total available amount (in bytes).",
                    "type": "integer",
                    "format": "int64"
                },
                "used": {
                    "description": "Used amount (in bytes).",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "user_svc.AddUserToOrganizationRequest": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                }
            }
        },
        "user_svc.AddUserToOrganizationResponse": {
            "type": "object"
        },
        "user_svc.AuthToken": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "user_svc.ChangePasswordAdminRequest": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.ChangePasswordAdminResponse": {
            "type": "object"
        },
        "user_svc.ChangePasswordRequest": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.ChangePasswordResponse": {
            "type": "object"
        },
        "user_svc.Contact": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier, which can be a URL.\n\nExample values: \"joe12\" (singulatron username), \"twitter.com/thejoe\" (twitter url), \"joe@joesdomain.com\" (email)",
                    "type": "string",
                    "example": "twitter.com/thejoe"
                },
                "isPrimary": {
                    "description": "If this is the primary contact method",
                    "type": "boolean"
                },
                "platform": {
                    "description": "Platform of the contact (e.g., \"email\", \"phone\", \"twitter\")",
                    "type": "string",
                    "example": "twitter"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "value": {
                    "description": "Value is the platform local unique identifier.\nIe. while the ` + "`" + `id` + "`" + ` of a Twitter contact is ` + "`" + `twitter.com/thejoe` + "`" + `, the value will be only ` + "`" + `thejoe` + "`" + `.\nFor email and phones the ` + "`" + `id` + "`" + ` and the ` + "`" + `value` + "`" + ` will be the same.\nThis field mostly exists for display purposes.\n\nExample values: \"joe12\" (singulatron username), \"thejoe\" (twitter username), \"joe@joesdomain.com\" (email)",
                    "type": "string",
                    "example": "thejoe"
                },
                "verified": {
                    "description": "Whether the contact is verified",
                    "type": "boolean"
                }
            }
        },
        "user_svc.CreateOrganizationRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization.",
                    "type": "string"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `organization` + "`" + `.",
                    "type": "string"
                }
            }
        },
        "user_svc.CreateOrganizationResponse": {
            "type": "object"
        },
        "user_svc.CreateRoleRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.CreateRoleResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "$ref": "#/definitions/user_svc.Role"
                }
            }
        },
        "user_svc.CreateUserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.CreateUserResponse": {
            "type": "object"
        },
        "user_svc.DeleteRoleResponse": {
            "type": "object"
        },
        "user_svc.DeleteUserResponse": {
            "type": "object"
        },
        "user_svc.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "user_svc.GetPermissionsResponse": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Permission"
                    }
                }
            }
        },
        "user_svc.GetPublicKeyResponse": {
            "type": "object",
            "properties": {
                "publicKey": {
                    "type": "string"
                }
            }
        },
        "user_svc.GetRolesResponse": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Role"
                    }
                }
            }
        },
        "user_svc.GetUsersRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "$ref": "#/definitions/datastore.Query"
                }
            }
        },
        "user_svc.GetUsersResponse": {
            "type": "object",
            "properties": {
                "after": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.User"
                    }
                }
            }
        },
        "user_svc.IsAuthorizedRequest": {
            "type": "object",
            "properties": {
                "contactsGranted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slugsGranted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.IsAuthorizedResponse": {
            "type": "object",
            "properties": {
                "authorized": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.LoginRequest": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/user_svc.AuthToken"
                }
            }
        },
        "user_svc.Organization": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization",
                    "type": "string",
                    "example": "Acme Corporation"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `organization` + "`" + `.",
                    "type": "string",
                    "example": "acme-corporation"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.Permission": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "eg. \"user.viewer\"",
                    "type": "string"
                },
                "name": {
                    "description": "eg. \"User Viewer\"",
                    "type": "string"
                },
                "ownerId": {
                    "description": "Service who owns the permission",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.ReadUserByTokenResponse": {
            "type": "object",
            "properties": {
                "activeOrganizationId": {
                    "type": "string"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Organization"
                    }
                },
                "user": {
                    "$ref": "#/definitions/user_svc.User"
                }
            }
        },
        "user_svc.RegisterRequest": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/user_svc.Contact"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.RegisterResponse": {
            "type": "object"
        },
        "user_svc.RemoveUserFromOrganizationRequest": {
            "type": "object"
        },
        "user_svc.RemoveUserFromOrganizationResponse": {
            "type": "object"
        },
        "user_svc.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "user_svc.SaveProfileRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "user_svc.SaveProfileResponse": {
            "type": "object"
        },
        "user_svc.SetRolePermissionsRequest": {
            "type": "object",
            "properties": {
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user_svc.SetRolePermissionsResponse": {
            "type": "object"
        },
        "user_svc.UpserPermissionRequest": {
            "type": "object",
            "properties": {
                "permission": {
                    "$ref": "#/definitions/user_svc.Permission"
                }
            }
        },
        "user_svc.User": {
            "type": "object",
            "properties": {
                "contacts": {
                    "description": "Contacts are used for login and identification purposes.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_svc.Contact"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Full name of the organization.",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "passwordHash": {
                    "type": "string"
                },
                "slug": {
                    "description": "URL-friendly unique (inside the Singularon platform) identifier for the ` + "`" + `user` + "`" + `.",
                    "type": "string",
                    "example": "jane-doe"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and token acquired from the User sService Login endpoint.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Superplatform API",
        "url": "https://superplatform.ai/docs/category/singulatron-api"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:58231",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Superplatform",
	Description:      "On-premise AI platform and microservices ecosystem.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
