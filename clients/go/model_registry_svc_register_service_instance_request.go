/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegistrySvcRegisterServiceInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrySvcRegisterServiceInstanceRequest{}

// RegistrySvcRegisterServiceInstanceRequest struct for RegistrySvcRegisterServiceInstanceRequest
type RegistrySvcRegisterServiceInstanceRequest struct {
	// Host of the service instance address. Required if URL is not provided
	Host *string `json:"host,omitempty"`
	// IP of the service instance address. Optional: to register by IP instead of host
	Ip *string `json:"ip,omitempty"`
	// Path of the service instance address. Optional (e.g., \"/api\")
	Path *string `json:"path,omitempty"`
	// Port of the service instance address. Required if URL is not provided
	Port *int32 `json:"port,omitempty"`
	// Scheme of the service instance address. Required if URL is not provided.
	Scheme *string `json:"scheme,omitempty"`
	// The User Svc slug of the service whose instance is being registered.
	Slug string `json:"slug"`
	// Full address URL of the service instance.
	Url *string `json:"url,omitempty"`
}

type _RegistrySvcRegisterServiceInstanceRequest RegistrySvcRegisterServiceInstanceRequest

// NewRegistrySvcRegisterServiceInstanceRequest instantiates a new RegistrySvcRegisterServiceInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrySvcRegisterServiceInstanceRequest(slug string) *RegistrySvcRegisterServiceInstanceRequest {
	this := RegistrySvcRegisterServiceInstanceRequest{}
	this.Slug = slug
	return &this
}

// NewRegistrySvcRegisterServiceInstanceRequestWithDefaults instantiates a new RegistrySvcRegisterServiceInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrySvcRegisterServiceInstanceRequestWithDefaults() *RegistrySvcRegisterServiceInstanceRequest {
	this := RegistrySvcRegisterServiceInstanceRequest{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetHost(v string) {
	o.Host = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetIp(v string) {
	o.Ip = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetPort(v int32) {
	o.Port = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetScheme(v string) {
	o.Scheme = &v
}

// GetSlug returns the Slug field value
func (o *RegistrySvcRegisterServiceInstanceRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *RegistrySvcRegisterServiceInstanceRequest) SetSlug(v string) {
	o.Slug = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RegistrySvcRegisterServiceInstanceRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RegistrySvcRegisterServiceInstanceRequest) SetUrl(v string) {
	o.Url = &v
}

func (o RegistrySvcRegisterServiceInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrySvcRegisterServiceInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	toSerialize["slug"] = o.Slug
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *RegistrySvcRegisterServiceInstanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistrySvcRegisterServiceInstanceRequest := _RegistrySvcRegisterServiceInstanceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistrySvcRegisterServiceInstanceRequest)

	if err != nil {
		return err
	}

	*o = RegistrySvcRegisterServiceInstanceRequest(varRegistrySvcRegisterServiceInstanceRequest)

	return err
}

type NullableRegistrySvcRegisterServiceInstanceRequest struct {
	value *RegistrySvcRegisterServiceInstanceRequest
	isSet bool
}

func (v NullableRegistrySvcRegisterServiceInstanceRequest) Get() *RegistrySvcRegisterServiceInstanceRequest {
	return v.value
}

func (v *NullableRegistrySvcRegisterServiceInstanceRequest) Set(val *RegistrySvcRegisterServiceInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrySvcRegisterServiceInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrySvcRegisterServiceInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrySvcRegisterServiceInstanceRequest(val *RegistrySvcRegisterServiceInstanceRequest) *NullableRegistrySvcRegisterServiceInstanceRequest {
	return &NullableRegistrySvcRegisterServiceInstanceRequest{value: val, isSet: true}
}

func (v NullableRegistrySvcRegisterServiceInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrySvcRegisterServiceInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


