/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegistrySvcServiceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrySvcServiceDefinition{}

// RegistrySvcServiceDefinition struct for RegistrySvcServiceDefinition
type RegistrySvcServiceDefinition struct {
	// API Specs such as OpenAPI definitions etc.
	ApiSpecs []RegistrySvcAPISpec `json:"apiSpecs,omitempty"`
	Clients []RegistrySvcClient `json:"clients,omitempty"`
	// Container specifications for Docker, K8s, etc.                                        // Programming language clients.
	Image *RegistrySvcImageSpec `json:"image,omitempty"`
	// The User Svc slug of the service whose instance is being registered.
	ServiceSlug string `json:"serviceSlug"`
}

type _RegistrySvcServiceDefinition RegistrySvcServiceDefinition

// NewRegistrySvcServiceDefinition instantiates a new RegistrySvcServiceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrySvcServiceDefinition(serviceSlug string) *RegistrySvcServiceDefinition {
	this := RegistrySvcServiceDefinition{}
	this.ServiceSlug = serviceSlug
	return &this
}

// NewRegistrySvcServiceDefinitionWithDefaults instantiates a new RegistrySvcServiceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrySvcServiceDefinitionWithDefaults() *RegistrySvcServiceDefinition {
	this := RegistrySvcServiceDefinition{}
	return &this
}

// GetApiSpecs returns the ApiSpecs field value if set, zero value otherwise.
func (o *RegistrySvcServiceDefinition) GetApiSpecs() []RegistrySvcAPISpec {
	if o == nil || IsNil(o.ApiSpecs) {
		var ret []RegistrySvcAPISpec
		return ret
	}
	return o.ApiSpecs
}

// GetApiSpecsOk returns a tuple with the ApiSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcServiceDefinition) GetApiSpecsOk() ([]RegistrySvcAPISpec, bool) {
	if o == nil || IsNil(o.ApiSpecs) {
		return nil, false
	}
	return o.ApiSpecs, true
}

// HasApiSpecs returns a boolean if a field has been set.
func (o *RegistrySvcServiceDefinition) HasApiSpecs() bool {
	if o != nil && !IsNil(o.ApiSpecs) {
		return true
	}

	return false
}

// SetApiSpecs gets a reference to the given []RegistrySvcAPISpec and assigns it to the ApiSpecs field.
func (o *RegistrySvcServiceDefinition) SetApiSpecs(v []RegistrySvcAPISpec) {
	o.ApiSpecs = v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *RegistrySvcServiceDefinition) GetClients() []RegistrySvcClient {
	if o == nil || IsNil(o.Clients) {
		var ret []RegistrySvcClient
		return ret
	}
	return o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcServiceDefinition) GetClientsOk() ([]RegistrySvcClient, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *RegistrySvcServiceDefinition) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given []RegistrySvcClient and assigns it to the Clients field.
func (o *RegistrySvcServiceDefinition) SetClients(v []RegistrySvcClient) {
	o.Clients = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *RegistrySvcServiceDefinition) GetImage() RegistrySvcImageSpec {
	if o == nil || IsNil(o.Image) {
		var ret RegistrySvcImageSpec
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySvcServiceDefinition) GetImageOk() (*RegistrySvcImageSpec, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *RegistrySvcServiceDefinition) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given RegistrySvcImageSpec and assigns it to the Image field.
func (o *RegistrySvcServiceDefinition) SetImage(v RegistrySvcImageSpec) {
	o.Image = &v
}

// GetServiceSlug returns the ServiceSlug field value
func (o *RegistrySvcServiceDefinition) GetServiceSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceSlug
}

// GetServiceSlugOk returns a tuple with the ServiceSlug field value
// and a boolean to check if the value has been set.
func (o *RegistrySvcServiceDefinition) GetServiceSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceSlug, true
}

// SetServiceSlug sets field value
func (o *RegistrySvcServiceDefinition) SetServiceSlug(v string) {
	o.ServiceSlug = v
}

func (o RegistrySvcServiceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrySvcServiceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiSpecs) {
		toSerialize["apiSpecs"] = o.ApiSpecs
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	toSerialize["serviceSlug"] = o.ServiceSlug
	return toSerialize, nil
}

func (o *RegistrySvcServiceDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceSlug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistrySvcServiceDefinition := _RegistrySvcServiceDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistrySvcServiceDefinition)

	if err != nil {
		return err
	}

	*o = RegistrySvcServiceDefinition(varRegistrySvcServiceDefinition)

	return err
}

type NullableRegistrySvcServiceDefinition struct {
	value *RegistrySvcServiceDefinition
	isSet bool
}

func (v NullableRegistrySvcServiceDefinition) Get() *RegistrySvcServiceDefinition {
	return v.value
}

func (v *NullableRegistrySvcServiceDefinition) Set(val *RegistrySvcServiceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrySvcServiceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrySvcServiceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrySvcServiceDefinition(val *RegistrySvcServiceDefinition) *NullableRegistrySvcServiceDefinition {
	return &NullableRegistrySvcServiceDefinition{value: val, isSet: true}
}

func (v NullableRegistrySvcServiceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrySvcServiceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


