/*
Superplatform

On-premise AI platform and microservices ecosystem.

API version: 0.2
Contact: sales@singulatron.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelSvcGetModelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelSvcGetModelResponse{}

// ModelSvcGetModelResponse struct for ModelSvcGetModelResponse
type ModelSvcGetModelResponse struct {
	Exists *bool `json:"exists,omitempty"`
	Model *ModelSvcModel `json:"model,omitempty"`
	Platform *ModelSvcPlatform `json:"platform,omitempty"`
}

// NewModelSvcGetModelResponse instantiates a new ModelSvcGetModelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelSvcGetModelResponse() *ModelSvcGetModelResponse {
	this := ModelSvcGetModelResponse{}
	return &this
}

// NewModelSvcGetModelResponseWithDefaults instantiates a new ModelSvcGetModelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelSvcGetModelResponseWithDefaults() *ModelSvcGetModelResponse {
	this := ModelSvcGetModelResponse{}
	return &this
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *ModelSvcGetModelResponse) GetExists() bool {
	if o == nil || IsNil(o.Exists) {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSvcGetModelResponse) GetExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *ModelSvcGetModelResponse) HasExists() bool {
	if o != nil && !IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *ModelSvcGetModelResponse) SetExists(v bool) {
	o.Exists = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ModelSvcGetModelResponse) GetModel() ModelSvcModel {
	if o == nil || IsNil(o.Model) {
		var ret ModelSvcModel
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSvcGetModelResponse) GetModelOk() (*ModelSvcModel, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ModelSvcGetModelResponse) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given ModelSvcModel and assigns it to the Model field.
func (o *ModelSvcGetModelResponse) SetModel(v ModelSvcModel) {
	o.Model = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *ModelSvcGetModelResponse) GetPlatform() ModelSvcPlatform {
	if o == nil || IsNil(o.Platform) {
		var ret ModelSvcPlatform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelSvcGetModelResponse) GetPlatformOk() (*ModelSvcPlatform, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *ModelSvcGetModelResponse) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given ModelSvcPlatform and assigns it to the Platform field.
func (o *ModelSvcGetModelResponse) SetPlatform(v ModelSvcPlatform) {
	o.Platform = &v
}

func (o ModelSvcGetModelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelSvcGetModelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	return toSerialize, nil
}

type NullableModelSvcGetModelResponse struct {
	value *ModelSvcGetModelResponse
	isSet bool
}

func (v NullableModelSvcGetModelResponse) Get() *ModelSvcGetModelResponse {
	return v.value
}

func (v *NullableModelSvcGetModelResponse) Set(val *ModelSvcGetModelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSvcGetModelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSvcGetModelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSvcGetModelResponse(val *ModelSvcGetModelResponse) *NullableModelSvcGetModelResponse {
	return &NullableModelSvcGetModelResponse{value: val, isSet: true}
}

func (v NullableModelSvcGetModelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSvcGetModelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


