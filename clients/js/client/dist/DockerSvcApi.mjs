import { a as BaseAPI, _ as __awaiter, b as RequiredError, J as JSONApiResponse } from './runtime2.mjs';
import { DockerSvcContainerIsRunningResponseFromJSON } from './DockerSvcContainerIsRunningResponse.mjs';
import { DockerSvcGetContainerSummaryResponseFromJSON } from './DockerSvcGetContainerSummaryResponse.mjs';
import { DockerSvcGetDockerHostResponseFromJSON } from './DockerSvcGetDockerHostResponse.mjs';
import { DockerSvcGetInfoResponseFromJSON } from './DockerSvcGetInfoResponse.mjs';
import { DockerSvcLaunchContainerRequestToJSON } from './DockerSvcLaunchContainerRequest.mjs';
import { DockerSvcLaunchContainerResponseFromJSON } from './DockerSvcLaunchContainerResponse.mjs';
import './DockerSvcDockerInfo.mjs';
import './DockerSvcLaunchContainerOptions.mjs';
import './DockerSvcLaunchInfo.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class DockerSvcApi extends BaseAPI {
    /**
     * Get a summary of the Docker container identified by the hash, limited to a specified number of lines
     * Get Container Summary
     */
    getContainerSummaryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['hash'] == null) {
                throw new RequiredError('hash', 'Required parameter "hash" was null or undefined when calling getContainerSummary().');
            }
            if (requestParameters['numberOfLines'] == null) {
                throw new RequiredError('numberOfLines', 'Required parameter "numberOfLines" was null or undefined when calling getContainerSummary().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/{hash}/summary/{numberOfLines}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))).replace(`{${"numberOfLines"}}`, encodeURIComponent(String(requestParameters['numberOfLines']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => DockerSvcGetContainerSummaryResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get a summary of the Docker container identified by the hash, limited to a specified number of lines
     * Get Container Summary
     */
    getContainerSummary(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getContainerSummaryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/host`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => DockerSvcGetDockerHostResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve information about the Docker host
     * Get Docker Host
     */
    getHost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getHostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => DockerSvcGetInfoResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve detailed information about the Docker service
     * Get Docker Service Information
     */
    getInfo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check if a Docker container identified by the hash is running
     * Check If a Container Is Running
     */
    isRunningRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['hash'] == null) {
                throw new RequiredError('hash', 'Required parameter "hash" was null or undefined when calling isRunning().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container/{hash}/is-running`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => DockerSvcContainerIsRunningResponseFromJSON(jsonValue));
        });
    }
    /**
     * Check if a Docker container identified by the hash is running
     * Check If a Container Is Running
     */
    isRunning(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isRunningRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Launches a Docker container with the specified parameters.  Requires the `docker-svc:docker:create` permission.
     * Launch a Container
     */
    launchContainerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling launchContainer().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/docker-svc/container`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerSvcLaunchContainerRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => DockerSvcLaunchContainerResponseFromJSON(jsonValue));
        });
    }
    /**
     * Launches a Docker container with the specified parameters.  Requires the `docker-svc:docker:create` permission.
     * Launch a Container
     */
    launchContainer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.launchContainerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { DockerSvcApi };
