'use strict';

var runtime = require('./runtime2.js');
var DynamicSvcCreateObjectRequest = require('./DynamicSvcCreateObjectRequest.js');
var DynamicSvcCreateObjectResponse = require('./DynamicSvcCreateObjectResponse.js');
var DynamicSvcDeleteObjectRequest = require('./DynamicSvcDeleteObjectRequest.js');
var DynamicSvcQueryRequest = require('./DynamicSvcQueryRequest.js');
var DynamicSvcQueryResponse = require('./DynamicSvcQueryResponse.js');
var DynamicSvcUpdateObjectRequest = require('./DynamicSvcUpdateObjectRequest.js');
var DynamicSvcUpsertObjectRequest = require('./DynamicSvcUpsertObjectRequest.js');
var DynamicSvcUpsertObjectResponse = require('./DynamicSvcUpsertObjectResponse.js');
require('./DynamicSvcObjectCreateFields.js');
require('./DynamicSvcObject.js');
require('./DatastoreFilter.js');
require('./DatastoreOp.js');
require('./DatastoreQuery.js');
require('./DatastoreOrderBy.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class DynamicSvcApi extends runtime.BaseAPI {
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    createObjectRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createObject().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/dynamic-svc/object`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DynamicSvcCreateObjectRequest.DynamicSvcCreateObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcCreateObjectResponse.DynamicSvcCreateObjectResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    createObject(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.createObjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    deleteObjectsRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteObjects().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/dynamic-svc/objects/delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DynamicSvcDeleteObjectRequest.DynamicSvcDeleteObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    deleteObjects(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteObjectsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Query Objects
     */
    queryRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/dynamic-svc/objects`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DynamicSvcQueryRequest.DynamicSvcQueryRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcQueryResponse.DynamicSvcQueryResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Query Objects
     */
    query() {
        return runtime.__awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.queryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Objects
     */
    updateObjectsRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling updateObjects().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/dynamic-svc/objects/update`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DynamicSvcUpdateObjectRequest.DynamicSvcUpdateObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Objects
     */
    updateObjects(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateObjectsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    upsertObjectRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['objectId'] == null) {
                throw new runtime.RequiredError('objectId', 'Required parameter "objectId" was null or undefined when calling upsertObject().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling upsertObject().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/dynamic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DynamicSvcUpsertObjectRequest.DynamicSvcUpsertObjectRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcUpsertObjectResponse.DynamicSvcUpsertObjectResponseFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    upsertObject(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.upsertObjectRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

exports.DynamicSvcApi = DynamicSvcApi;
