import { a as BaseAPI, _ as __awaiter, b as RequiredError, J as JSONApiResponse, T as TextApiResponse } from './runtime2.mjs';
import { PromptSvcAddPromptRequestToJSON } from './PromptSvcAddPromptRequest.mjs';
import { PromptSvcAddPromptResponseFromJSON } from './PromptSvcAddPromptResponse.mjs';
import { PromptSvcListPromptsRequestToJSON } from './PromptSvcListPromptsRequest.mjs';
import { PromptSvcListPromptsResponseFromJSON } from './PromptSvcListPromptsResponse.mjs';
import { PromptSvcRemovePromptRequestToJSON } from './PromptSvcRemovePromptRequest.mjs';
import './PromptSvcPrompt.mjs';
import './PromptSvcPromptStatus.mjs';
import './DatastoreQuery.mjs';
import './DatastoreFilter.mjs';
import './DatastoreOp.mjs';
import './DatastoreOrderBy.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class PromptSvcApi extends BaseAPI {
    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    addPromptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling addPrompt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/prompt`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcAddPromptRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => PromptSvcAddPromptResponseFromJSON(jsonValue));
        });
    }
    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    addPrompt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addPromptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    listPromptsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/prompts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcListPromptsRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => PromptSvcListPromptsResponseFromJSON(jsonValue));
        });
    }
    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    listPrompts() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listPromptsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    removePromptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling removePrompt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/remove`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PromptSvcRemovePromptRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    removePrompt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removePromptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Subscribe to prompt responses by thread via Server-Sent Events (SSE)
     * Subscribe to Prompt Responses by Thread
     */
    subscribeToPromptResponsesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['threadId'] == null) {
                throw new RequiredError('threadId', 'Required parameter "threadId" was null or undefined when calling subscribeToPromptResponses().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/prompt-svc/prompts/{threadId}/responses/subscribe`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new JSONApiResponse(response);
            }
            else {
                return new TextApiResponse(response);
            }
        });
    }
    /**
     * Subscribe to prompt responses by thread via Server-Sent Events (SSE)
     * Subscribe to Prompt Responses by Thread
     */
    subscribeToPromptResponses(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscribeToPromptResponsesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { PromptSvcApi };
