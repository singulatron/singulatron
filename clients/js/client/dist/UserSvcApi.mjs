import { a as BaseAPI, _ as __awaiter, b as RequiredError, J as JSONApiResponse } from './runtime2.mjs';
import { UserSvcAddUserToOrganizationRequestToJSON } from './UserSvcAddUserToOrganizationRequest.mjs';
import { UserSvcChangePasswordAdminRequestToJSON } from './UserSvcChangePasswordAdminRequest.mjs';
import { UserSvcChangePasswordRequestToJSON } from './UserSvcChangePasswordRequest.mjs';
import { UserSvcCreateOrganizationRequestToJSON } from './UserSvcCreateOrganizationRequest.mjs';
import { UserSvcCreateRoleRequestToJSON } from './UserSvcCreateRoleRequest.mjs';
import { UserSvcCreateRoleResponseFromJSON } from './UserSvcCreateRoleResponse.mjs';
import { UserSvcCreateUserRequestToJSON } from './UserSvcCreateUserRequest.mjs';
import { UserSvcGetPermissionsResponseFromJSON } from './UserSvcGetPermissionsResponse.mjs';
import { UserSvcGetPublicKeyResponseFromJSON } from './UserSvcGetPublicKeyResponse.mjs';
import { UserSvcGetRolesResponseFromJSON } from './UserSvcGetRolesResponse.mjs';
import { UserSvcGetUsersRequestToJSON } from './UserSvcGetUsersRequest.mjs';
import { UserSvcGetUsersResponseFromJSON } from './UserSvcGetUsersResponse.mjs';
import { UserSvcIsAuthorizedRequestToJSON } from './UserSvcIsAuthorizedRequest.mjs';
import { UserSvcIsAuthorizedResponseFromJSON } from './UserSvcIsAuthorizedResponse.mjs';
import { UserSvcLoginRequestToJSON } from './UserSvcLoginRequest.mjs';
import { UserSvcLoginResponseFromJSON } from './UserSvcLoginResponse.mjs';
import { UserSvcReadUserByTokenResponseFromJSON } from './UserSvcReadUserByTokenResponse.mjs';
import { UserSvcRegisterRequestToJSON } from './UserSvcRegisterRequest.mjs';
import { UserSvcSaveProfileRequestToJSON } from './UserSvcSaveProfileRequest.mjs';
import { UserSvcSetRolePermissionsRequestToJSON } from './UserSvcSetRolePermissionsRequest.mjs';
import { UserSvcUpserPermissionRequestToJSON } from './UserSvcUpserPermissionRequest.mjs';
import './UserSvcRole.mjs';
import './UserSvcUser.mjs';
import './UserSvcContact.mjs';
import './UserSvcPermission.mjs';
import './DatastoreQuery.mjs';
import './DatastoreFilter.mjs';
import './DatastoreOp.mjs';
import './DatastoreOrderBy.mjs';
import './UserSvcAuthToken.mjs';
import './UserSvcOrganization.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class UserSvcApi extends BaseAPI {
    /**
     * Adds a specific permission to a role identified by roleId.  Requires the `user-svc:permission:assign` permission.
     * Add Permission to Role
     */
    addPermissionToRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling addPermissionToRole().');
            }
            if (requestParameters['permissionId'] == null) {
                throw new RequiredError('permissionId', 'Required parameter "permissionId" was null or undefined when calling addPermissionToRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/role/{roleId}/permission/{permissionId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Adds a specific permission to a role identified by roleId.  Requires the `user-svc:permission:assign` permission.
     * Add Permission to Role
     */
    addPermissionToRole(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addPermissionToRoleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    addUserToOrganizationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['organizationId'] == null) {
                throw new RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling addUserToOrganization().');
            }
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling addUserToOrganization().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcAddUserToOrganizationRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    addUserToOrganization(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addUserToOrganizationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    changePasswordRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling changePassword().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/change-password`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcChangePasswordRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    changePassword(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePasswordRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows an administrator to change a user\'s password.
     * Change User Password (Admin)
     */
    changePasswordAdminRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling changePasswordAdmin().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/change-password-admin`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcChangePasswordAdminRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows an administrator to change a user\'s password.
     * Change User Password (Admin)
     */
    changePasswordAdmin(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.changePasswordAdminRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `$organization-slug` is a unique identifier for the created organization. Dynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles.
     * Create an Organization
     */
    createOrganizationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling createOrganization().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/organization`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcCreateOrganizationRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `$organization-slug` is a unique identifier for the created organization. Dynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles.
     * Create an Organization
     */
    createOrganization(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createOrganizationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new role. <b>The role ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s slug is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * Create a New Role
     */
    createRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling createRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/role`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcCreateRoleRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcCreateRoleResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create a new role. <b>The role ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s slug is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * Create a New Role
     */
    createRole(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    createUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling createUser().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/user`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcCreateUserRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    createUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createUserRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a role based on the role ID.
     * Delete a Role
     */
    deleteRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling deleteRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/role/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Delete a role based on the role ID.
     * Delete a Role
     */
    deleteRole(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteRoleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    deleteUserRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new RequiredError('userId', 'Required parameter "userId" was null or undefined when calling deleteUser().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    deleteUser(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteUserRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve permissions associated with a specific role ID.
     * Get Permissions by Role
     */
    getPermissionsByRoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling getPermissionsByRole().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/role/{roleId}/permissions`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcGetPermissionsResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve permissions associated with a specific role ID.
     * Get Permissions by Role
     */
    getPermissionsByRole(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPermissionsByRoleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the public key to descrypt the JWT.
     * Get Public Key
     */
    getPublicKeyRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/user-svc/public-key`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcGetPublicKeyResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get the public key to descrypt the JWT.
     * Get Public Key
     */
    getPublicKey(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getPublicKeyRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve all roles from the user service.
     * Get all Roles
     */
    getRolesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/roles`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcGetRolesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve all roles from the user service.
     * Get all Roles
     */
    getRoles(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRolesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetches a list of users with optional query filters and pagination.
     * List Users
     */
    getUsersRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/users`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcGetUsersRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcGetUsersResponseFromJSON(jsonValue));
        });
    }
    /**
     * Fetches a list of users with optional query filters and pagination.
     * List Users
     */
    getUsers() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.getUsersRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Check if a user is authorized for a specific permission.
     * Is Authorized
     */
    isAuthorizedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['permissionId'] == null) {
                throw new RequiredError('permissionId', 'Required parameter "permissionId" was null or undefined when calling isAuthorized().');
            }
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling isAuthorized().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/permission/{permissionId}/is-authorized`.replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcIsAuthorizedRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcIsAuthorizedResponseFromJSON(jsonValue));
        });
    }
    /**
     * Check if a user is authorized for a specific permission.
     * Is Authorized
     */
    isAuthorized(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.isAuthorizedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Authenticates a user and returns a token.
     * Login
     */
    loginRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling login().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/user-svc/login`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcLoginRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcLoginResponseFromJSON(jsonValue));
        });
    }
    /**
     * Authenticates a user and returns a token.
     * Login
     */
    login(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.loginRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve user information based on an authentication token.
     * Read User by Token
     */
    readUserByTokenRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/user/by-token`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => UserSvcReadUserByTokenResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve user information based on an authentication token.
     * Read User by Token
     */
    readUserByToken(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readUserByTokenRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    registerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling register().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/user-svc/register`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcRegisterRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    register(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    removeUserFromOrganizationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['organizationId'] == null) {
                throw new RequiredError('organizationId', 'Required parameter "organizationId" was null or undefined when calling removeUserFromOrganization().');
            }
            if (requestParameters['userId'] == null) {
                throw new RequiredError('userId', 'Required parameter "userId" was null or undefined when calling removeUserFromOrganization().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/organization/{organizationId}/user/{userId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['request'],
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    removeUserFromOrganization(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeUserFromOrganizationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Save user profile information based on the provided user ID.
     * Save User Profile
     */
    saveUserProfileRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new RequiredError('userId', 'Required parameter "userId" was null or undefined when calling saveUserProfile().');
            }
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling saveUserProfile().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcSaveProfileRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Save user profile information based on the provided user ID.
     * Save User Profile
     */
    saveUserProfile(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.saveUserProfileRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * Set Role Permissions
     */
    setRolePermissionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling setRolePermission().');
            }
            if (requestParameters['body'] == null) {
                throw new RequiredError('body', 'Required parameter "body" was null or undefined when calling setRolePermission().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/role/{roleId}/permissions`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcSetRolePermissionsRequestToJSON(requestParameters['body']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * Set Role Permissions
     */
    setRolePermission(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.setRolePermissionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates or updates a permission. <b>The permission ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * Upsert a Permission
     */
    upsertPermissionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['permissionId'] == null) {
                throw new RequiredError('permissionId', 'Required parameter "permissionId" was null or undefined when calling upsertPermission().');
            }
            if (requestParameters['requestBody'] == null) {
                throw new RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling upsertPermission().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/user-svc/permission/{permissionId}`.replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: UserSvcUpserPermissionRequestToJSON(requestParameters['requestBody']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Creates or updates a permission. <b>The permission ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * Upsert a Permission
     */
    upsertPermission(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.upsertPermissionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { UserSvcApi };
