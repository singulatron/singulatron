import { a as BaseAPI, _ as __awaiter, b as RequiredError, V as VoidApiResponse, J as JSONApiResponse } from './runtime2.mjs';
import { RegistrySvcListNodesResponseFromJSON } from './RegistrySvcListNodesResponse.mjs';
import { RegistrySvcListServiceInstancesResponseFromJSON } from './RegistrySvcListServiceInstancesResponse.mjs';
import { RegistrySvcRegisterServiceInstanceRequestToJSON } from './RegistrySvcRegisterServiceInstanceRequest.mjs';
import { RegistrySvcSaveServiceDefinitionRequestToJSON } from './RegistrySvcSaveServiceDefinitionRequest.mjs';
import './RegistrySvcNode.mjs';
import './RegistrySvcGPU.mjs';
import './RegistrySvcProcess.mjs';
import './RegistrySvcResourceUsage.mjs';
import './RegistrySvcUsage.mjs';
import './RegistrySvcServiceInstance.mjs';
import './RegistrySvcServiceDefinition.mjs';
import './RegistrySvcAPISpec.mjs';
import './RegistrySvcImageSpec.mjs';
import './RegistrySvcClient.mjs';
import './RegistrySvcLanguage.mjs';

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class RegistrySvcApi extends BaseAPI {
    /**
     * Deletes a registered service definition based on the service ID.
     * Delete Service Definition
     */
    deleteServiceDefinitionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new RequiredError('id', 'Required parameter "id" was null or undefined when calling deleteServiceDefinition().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/service-definition/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new VoidApiResponse(response);
        });
    }
    /**
     * Deletes a registered service definition based on the service ID.
     * Delete Service Definition
     */
    deleteServiceDefinition(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteServiceDefinitionRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieve a list of nodes.
     * List Nodes
     */
    listNodesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/nodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => RegistrySvcListNodesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve a list of nodes.
     * List Nodes
     */
    listNodes() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listNodesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).
     * List Service Instances
     */
    queryServiceInstancesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['scheme'] != null) {
                queryParameters['scheme'] = requestParameters['scheme'];
            }
            if (requestParameters['ip'] != null) {
                queryParameters['ip'] = requestParameters['ip'];
            }
            if (requestParameters['host'] != null) {
                queryParameters['host'] = requestParameters['host'];
            }
            if (requestParameters['ip2'] != null) {
                queryParameters['ip'] = requestParameters['ip2'];
            }
            if (requestParameters['id'] != null) {
                queryParameters['id'] = requestParameters['id'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/services`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new JSONApiResponse(response, (jsonValue) => RegistrySvcListServiceInstancesResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).
     * List Service Instances
     */
    queryServiceInstances() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.queryServiceInstancesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.
     * Register Service Instance
     */
    registerServiceInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling registerServiceInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/service-instance`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: RegistrySvcRegisterServiceInstanceRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.
     * Register Service Instance
     */
    registerServiceInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.registerServiceInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Removes a registered service instance based on the service ID.
     * Remove Service Instance
     */
    removeServiceInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new RequiredError('id', 'Required parameter "id" was null or undefined when calling removeServiceInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/service-instance/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new VoidApiResponse(response);
        });
    }
    /**
     * Removes a registered service instance based on the service ID.
     * Remove Service Instance
     */
    removeServiceInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.removeServiceInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Registers a new service definition, associating an service definition address with a slug acquired from the bearer token.
     * Register Service Definition
     */
    saveServiceDefinitionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new RequiredError('request', 'Required parameter "request" was null or undefined when calling saveServiceDefinition().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/registry-svc/service-definition`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: RegistrySvcSaveServiceDefinitionRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new JSONApiResponse(response);
        });
    }
    /**
     * Registers a new service definition, associating an service definition address with a slug acquired from the bearer token.
     * Register Service Definition
     */
    saveServiceDefinition(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.saveServiceDefinitionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

export { RegistrySvcApi };
