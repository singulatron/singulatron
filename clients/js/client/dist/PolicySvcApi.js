'use strict';

var runtime = require('./runtime2.js');
var PolicySvcCheckRequest = require('./PolicySvcCheckRequest.js');
var PolicySvcCheckResponse = require('./PolicySvcCheckResponse.js');
var PolicySvcUpsertInstanceRequest = require('./PolicySvcUpsertInstanceRequest.js');
require('./PolicySvcInstance.js');
require('./PolicySvcRateLimitParameters.js');
require('./PolicySvcScope.js');
require('./PolicySvcEntity.js');
require('./PolicySvcTemplateId.js');
require('./PolicySvcBlocklistParameters.js');

/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 */
class PolicySvcApi extends runtime.BaseAPI {
    /**
     * Check records a resource access and returns if the access is allowed.
     * Check
     */
    checkRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling check().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/policy-svc/check`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PolicySvcCheckRequest.PolicySvcCheckRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PolicySvcCheckResponse.PolicySvcCheckResponseFromJSON(jsonValue));
        });
    }
    /**
     * Check records a resource access and returns if the access is allowed.
     * Check
     */
    check(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.checkRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Allows user to upsert a new policy instance based on a template.
     * Upsert an Instance
     */
    upsertInstanceRaw(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            if (requestParameters['instanceId'] == null) {
                throw new runtime.RequiredError('instanceId', 'Required parameter "instanceId" was null or undefined when calling upsertInstance().');
            }
            if (requestParameters['request'] == null) {
                throw new runtime.RequiredError('request', 'Required parameter "request" was null or undefined when calling upsertInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // BearerAuth authentication
            }
            const response = yield this.request({
                path: `/policy-svc/instance/{instanceId}`.replace(`{${"instanceId"}}`, encodeURIComponent(String(requestParameters['instanceId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: PolicySvcUpsertInstanceRequest.PolicySvcUpsertInstanceRequestToJSON(requestParameters['request']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Allows user to upsert a new policy instance based on a template.
     * Upsert an Instance
     */
    upsertInstance(requestParameters, initOverrides) {
        return runtime.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.upsertInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}

exports.PolicySvcApi = PolicySvcApi;
