/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DownloadSvcDownloadRequest,
  DownloadSvcDownloadsResponse,
  DownloadSvcErrorResponse,
  DownloadSvcGetDownloadResponse,
} from '../models/index';
import {
    DownloadSvcDownloadRequestFromJSON,
    DownloadSvcDownloadRequestToJSON,
    DownloadSvcDownloadsResponseFromJSON,
    DownloadSvcDownloadsResponseToJSON,
    DownloadSvcErrorResponseFromJSON,
    DownloadSvcErrorResponseToJSON,
    DownloadSvcGetDownloadResponseFromJSON,
    DownloadSvcGetDownloadResponseToJSON,
} from '../models/index';

export interface DownloadRequest {
    request: DownloadSvcDownloadRequest;
}

export interface GetDownloadRequest {
    downloadId: string;
}

export interface PauseRequest {
    downloadId: string;
}

/**
 * 
 */
export class DownloadSvcApi extends runtime.BaseAPI {

    /**
     * Start a download for a specified URL.  Requires the `download-svc:download:create` permission.
     * Download a File
     */
    async downloadRaw(requestParameters: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling download().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/download-svc/download`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DownloadSvcDownloadRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start a download for a specified URL.  Requires the `download-svc:download:create` permission.
     * Download a File
     */
    async download(requestParameters: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.downloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a download by ID.  Requires the `download-svc:download:view` permission.
     * Get a Download
     */
    async getDownloadRaw(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadSvcGetDownloadResponse>> {
        if (requestParameters['downloadId'] == null) {
            throw new runtime.RequiredError(
                'downloadId',
                'Required parameter "downloadId" was null or undefined when calling getDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/download-svc/download/{downloadId}`.replace(`{${"downloadId"}}`, encodeURIComponent(String(requestParameters['downloadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DownloadSvcGetDownloadResponseFromJSON(jsonValue));
    }

    /**
     * Get a download by ID.  Requires the `download-svc:download:view` permission.
     * Get a Download
     */
    async getDownload(requestParameters: GetDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadSvcGetDownloadResponse> {
        const response = await this.getDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a list of all download details.  Requires the `download-svc:download:view` permission.
     * List Downloads
     */
    async listDownloadsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadSvcDownloadsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/download-svc/downloads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DownloadSvcDownloadsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a list of all download details.  Requires the `download-svc:download:view` permission.
     * List Downloads
     */
    async listDownloads(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadSvcDownloadsResponse> {
        const response = await this.listDownloadsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pause a download that is currently in progress.  Requires the `download-svc:download:edit` permission.
     * Pause a Download
     */
    async pauseRaw(requestParameters: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['downloadId'] == null) {
            throw new runtime.RequiredError(
                'downloadId',
                'Required parameter "downloadId" was null or undefined when calling pause().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/download-svc/download/{downloadId}/pause`.replace(`{${"downloadId"}}`, encodeURIComponent(String(requestParameters['downloadId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pause a download that is currently in progress.  Requires the `download-svc:download:edit` permission.
     * Pause a Download
     */
    async pause(requestParameters: PauseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.pauseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
