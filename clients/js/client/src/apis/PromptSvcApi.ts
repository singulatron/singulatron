/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PromptSvcAddPromptRequest,
  PromptSvcAddPromptResponse,
  PromptSvcErrorResponse,
  PromptSvcListPromptsRequest,
  PromptSvcListPromptsResponse,
  PromptSvcRemovePromptRequest,
} from '../models/index';
import {
    PromptSvcAddPromptRequestFromJSON,
    PromptSvcAddPromptRequestToJSON,
    PromptSvcAddPromptResponseFromJSON,
    PromptSvcAddPromptResponseToJSON,
    PromptSvcErrorResponseFromJSON,
    PromptSvcErrorResponseToJSON,
    PromptSvcListPromptsRequestFromJSON,
    PromptSvcListPromptsRequestToJSON,
    PromptSvcListPromptsResponseFromJSON,
    PromptSvcListPromptsResponseToJSON,
    PromptSvcRemovePromptRequestFromJSON,
    PromptSvcRemovePromptRequestToJSON,
} from '../models/index';

export interface AddPromptRequest {
    request: PromptSvcAddPromptRequest;
}

export interface ListPromptsRequest {
    request?: PromptSvcListPromptsRequest;
}

export interface RemovePromptRequest {
    request: PromptSvcRemovePromptRequest;
}

export interface SubscribeToPromptResponsesRequest {
    threadId: string;
}

/**
 * 
 */
export class PromptSvcApi extends runtime.BaseAPI {

    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    async addPromptRaw(requestParameters: AddPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptSvcAddPromptResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling addPrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/prompt-svc/prompt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptSvcAddPromptRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptSvcAddPromptResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * Add Prompt
     */
    async addPrompt(requestParameters: AddPromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptSvcAddPromptResponse> {
        const response = await this.addPromptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    async listPromptsRaw(requestParameters: ListPromptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptSvcListPromptsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/prompt-svc/prompts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptSvcListPromptsRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptSvcListPromptsResponseFromJSON(jsonValue));
    }

    /**
     * List prompts that satisfy a query.
     * List Prompts
     */
    async listPrompts(requestParameters: ListPromptsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptSvcListPromptsResponse> {
        const response = await this.listPromptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    async removePromptRaw(requestParameters: RemovePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling removePrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/prompt-svc/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptSvcRemovePromptRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a prompt by ID.
     * Remove Prompt
     */
    async removePrompt(requestParameters: RemovePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removePromptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe to prompt responses by thread via Server-Sent Events (SSE)
     * Subscribe to Prompt Responses by Thread
     */
    async subscribeToPromptResponsesRaw(requestParameters: SubscribeToPromptResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['threadId'] == null) {
            throw new runtime.RequiredError(
                'threadId',
                'Required parameter "threadId" was null or undefined when calling subscribeToPromptResponses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/prompt-svc/prompts/{threadId}/responses/subscribe`.replace(`{${"threadId"}}`, encodeURIComponent(String(requestParameters['threadId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Subscribe to prompt responses by thread via Server-Sent Events (SSE)
     * Subscribe to Prompt Responses by Thread
     */
    async subscribeToPromptResponses(requestParameters: SubscribeToPromptResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.subscribeToPromptResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
