/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserSvcAddUserToOrganizationRequest,
  UserSvcChangePasswordAdminRequest,
  UserSvcChangePasswordRequest,
  UserSvcCreateOrganizationRequest,
  UserSvcCreateRoleRequest,
  UserSvcCreateRoleResponse,
  UserSvcCreateUserRequest,
  UserSvcErrorResponse,
  UserSvcGetPermissionsResponse,
  UserSvcGetPublicKeyResponse,
  UserSvcGetRolesResponse,
  UserSvcGetUsersRequest,
  UserSvcGetUsersResponse,
  UserSvcIsAuthorizedRequest,
  UserSvcIsAuthorizedResponse,
  UserSvcLoginRequest,
  UserSvcLoginResponse,
  UserSvcReadUserByTokenResponse,
  UserSvcRegisterRequest,
  UserSvcSaveProfileRequest,
  UserSvcSetRolePermissionsRequest,
  UserSvcUpserPermissionRequest,
} from '../models/index';
import {
    UserSvcAddUserToOrganizationRequestFromJSON,
    UserSvcAddUserToOrganizationRequestToJSON,
    UserSvcChangePasswordAdminRequestFromJSON,
    UserSvcChangePasswordAdminRequestToJSON,
    UserSvcChangePasswordRequestFromJSON,
    UserSvcChangePasswordRequestToJSON,
    UserSvcCreateOrganizationRequestFromJSON,
    UserSvcCreateOrganizationRequestToJSON,
    UserSvcCreateRoleRequestFromJSON,
    UserSvcCreateRoleRequestToJSON,
    UserSvcCreateRoleResponseFromJSON,
    UserSvcCreateRoleResponseToJSON,
    UserSvcCreateUserRequestFromJSON,
    UserSvcCreateUserRequestToJSON,
    UserSvcErrorResponseFromJSON,
    UserSvcErrorResponseToJSON,
    UserSvcGetPermissionsResponseFromJSON,
    UserSvcGetPermissionsResponseToJSON,
    UserSvcGetPublicKeyResponseFromJSON,
    UserSvcGetPublicKeyResponseToJSON,
    UserSvcGetRolesResponseFromJSON,
    UserSvcGetRolesResponseToJSON,
    UserSvcGetUsersRequestFromJSON,
    UserSvcGetUsersRequestToJSON,
    UserSvcGetUsersResponseFromJSON,
    UserSvcGetUsersResponseToJSON,
    UserSvcIsAuthorizedRequestFromJSON,
    UserSvcIsAuthorizedRequestToJSON,
    UserSvcIsAuthorizedResponseFromJSON,
    UserSvcIsAuthorizedResponseToJSON,
    UserSvcLoginRequestFromJSON,
    UserSvcLoginRequestToJSON,
    UserSvcLoginResponseFromJSON,
    UserSvcLoginResponseToJSON,
    UserSvcReadUserByTokenResponseFromJSON,
    UserSvcReadUserByTokenResponseToJSON,
    UserSvcRegisterRequestFromJSON,
    UserSvcRegisterRequestToJSON,
    UserSvcSaveProfileRequestFromJSON,
    UserSvcSaveProfileRequestToJSON,
    UserSvcSetRolePermissionsRequestFromJSON,
    UserSvcSetRolePermissionsRequestToJSON,
    UserSvcUpserPermissionRequestFromJSON,
    UserSvcUpserPermissionRequestToJSON,
} from '../models/index';

export interface AddPermissionToRoleRequest {
    roleId: string;
    permissionId: string;
}

export interface AddUserToOrganizationRequest {
    organizationId: string;
    request: UserSvcAddUserToOrganizationRequest;
}

export interface ChangePasswordRequest {
    request: UserSvcChangePasswordRequest;
}

export interface ChangePasswordAdminRequest {
    request: UserSvcChangePasswordAdminRequest;
}

export interface CreateOrganizationRequest {
    request: UserSvcCreateOrganizationRequest;
}

export interface CreateRoleRequest {
    request: UserSvcCreateRoleRequest;
}

export interface CreateUserRequest {
    request: UserSvcCreateUserRequest;
}

export interface DeleteRoleRequest {
    roleId: string;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface GetPermissionsByRoleRequest {
    roleId: string;
}

export interface GetUsersRequest {
    request?: UserSvcGetUsersRequest;
}

export interface IsAuthorizedRequest {
    permissionId: string;
    body: UserSvcIsAuthorizedRequest;
}

export interface LoginRequest {
    request: UserSvcLoginRequest;
}

export interface RegisterRequest {
    body: UserSvcRegisterRequest;
}

export interface RemoveUserFromOrganizationRequest {
    organizationId: string;
    userId: string;
    request?: object;
}

export interface SaveUserProfileRequest {
    userId: string;
    body: UserSvcSaveProfileRequest;
}

export interface SetRolePermissionRequest {
    roleId: string;
    body: UserSvcSetRolePermissionsRequest;
}

export interface UpsertPermissionRequest {
    permissionId: string;
    requestBody: UserSvcUpserPermissionRequest;
}

/**
 * 
 */
export class UserSvcApi extends runtime.BaseAPI {

    /**
     * Adds a specific permission to a role identified by roleId.  Requires the `user-svc:permission:assign` permission.
     * Add Permission to Role
     */
    async addPermissionToRoleRaw(requestParameters: AddPermissionToRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling addPermissionToRole().'
            );
        }

        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling addPermissionToRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/role/{roleId}/permission/{permissionId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Adds a specific permission to a role identified by roleId.  Requires the `user-svc:permission:assign` permission.
     * Add Permission to Role
     */
    async addPermissionToRole(requestParameters: AddPermissionToRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addPermissionToRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    async addUserToOrganizationRaw(requestParameters: AddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling addUserToOrganization().'
            );
        }

        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling addUserToOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/organization/{organizationId}/user`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcAddUserToOrganizationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Add a User to an Organization
     */
    async addUserToOrganization(requestParameters: AddUserToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addUserToOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling changePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcChangePasswordRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows an authenticated user to change their own password.
     * Change User Password
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an administrator to change a user\'s password.
     * Change User Password (Admin)
     */
    async changePasswordAdminRaw(requestParameters: ChangePasswordAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling changePasswordAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/change-password-admin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcChangePasswordAdminRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows an administrator to change a user\'s password.
     * Change User Password (Admin)
     */
    async changePasswordAdmin(requestParameters: ChangePasswordAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.changePasswordAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `$organization-slug` is a unique identifier for the created organization. Dynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles.
     * Create an Organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling createOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcCreateOrganizationRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows a logged-in user to create a new organization. The user initiating the request will be assigned the role of admin for that organization. The initiating user will receive a dynamic role in the format `user-svc:org:{organizationId}:admin`, where `$organization-slug` is a unique identifier for the created organization. Dynamic roles are generated based on specific user-resource associations, offering more flexible permission management compared to static roles.
     * Create an Organization
     */
    async createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new role. <b>The role ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s slug is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * Create a New Role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcCreateRoleResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling createRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcCreateRoleRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcCreateRoleResponseFromJSON(jsonValue));
    }

    /**
     * Create a new role. <b>The role ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s slug is `petstore-svc` the role should look like `petstore-svc:admin`. The user account who creates the role will become the owner of that role, and only the owner will be able to edit the role.  Requires the `user-svc:role:create` permission.
     * Create a New Role
     */
    async createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcCreateRoleResponse> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcCreateUserRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows an authenticated administrator to create a new user with specified details.
     * Create a New User
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role based on the role ID.
     * Delete a Role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling deleteRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/role/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a role based on the role ID.
     * Delete a Role
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a user based on the user ID.
     * Delete a User
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve permissions associated with a specific role ID.
     * Get Permissions by Role
     */
    async getPermissionsByRoleRaw(requestParameters: GetPermissionsByRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcGetPermissionsResponse>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling getPermissionsByRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/role/{roleId}/permissions`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcGetPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve permissions associated with a specific role ID.
     * Get Permissions by Role
     */
    async getPermissionsByRole(requestParameters: GetPermissionsByRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcGetPermissionsResponse> {
        const response = await this.getPermissionsByRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the public key to descrypt the JWT.
     * Get Public Key
     */
    async getPublicKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcGetPublicKeyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-svc/public-key`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcGetPublicKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get the public key to descrypt the JWT.
     * Get Public Key
     */
    async getPublicKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcGetPublicKeyResponse> {
        const response = await this.getPublicKeyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all roles from the user service.
     * Get all Roles
     */
    async getRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcGetRolesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcGetRolesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all roles from the user service.
     * Get all Roles
     */
    async getRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcGetRolesResponse> {
        const response = await this.getRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of users with optional query filters and pagination.
     * List Users
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcGetUsersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcGetUsersRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcGetUsersResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a list of users with optional query filters and pagination.
     * List Users
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcGetUsersResponse> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a user is authorized for a specific permission.
     * Is Authorized
     */
    async isAuthorizedRaw(requestParameters: IsAuthorizedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcIsAuthorizedResponse>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling isAuthorized().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling isAuthorized().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/permission/{permissionId}/is-authorized`.replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcIsAuthorizedRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcIsAuthorizedResponseFromJSON(jsonValue));
    }

    /**
     * Check if a user is authorized for a specific permission.
     * Is Authorized
     */
    async isAuthorized(requestParameters: IsAuthorizedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcIsAuthorizedResponse> {
        const response = await this.isAuthorizedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates a user and returns a token.
     * Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcLoginResponse>> {
        if (requestParameters['request'] == null) {
            throw new runtime.RequiredError(
                'request',
                'Required parameter "request" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-svc/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcLoginRequestToJSON(requestParameters['request']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcLoginResponseFromJSON(jsonValue));
    }

    /**
     * Authenticates a user and returns a token.
     * Login
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user information based on an authentication token.
     * Read User by Token
     */
    async readUserByTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSvcReadUserByTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/user/by-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSvcReadUserByTokenResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve user information based on an authentication token.
     * Read User by Token
     */
    async readUserByToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSvcReadUserByTokenResponse> {
        const response = await this.readUserByTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-svc/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcRegisterRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Register a new user with a name, email, and password.
     * Register
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    async removeUserFromOrganizationRaw(requestParameters: RemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling removeUserFromOrganization().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeUserFromOrganization().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/organization/{organizationId}/user/{userId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['request'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allows an authorized user to add another user to a specific organization. The user will be assigned a specific role within the organization.
     * Remove a User from an Organization
     */
    async removeUserFromOrganization(requestParameters: RemoveUserFromOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeUserFromOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save user profile information based on the provided user ID.
     * Save User Profile
     */
    async saveUserProfileRaw(requestParameters: SaveUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling saveUserProfile().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling saveUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcSaveProfileRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save user profile information based on the provided user ID.
     * Save User Profile
     */
    async saveUserProfile(requestParameters: SaveUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.saveUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * Set Role Permissions
     */
    async setRolePermissionRaw(requestParameters: SetRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling setRolePermission().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling setRolePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/role/{roleId}/permissions`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters['roleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcSetRolePermissionsRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set permissions for a specified role. The caller can add permissions it owns to any role. If the caller tries to add a permission it doesn\'t own to a role, `StatusBadRequest` will be returned.
     * Set Role Permissions
     */
    async setRolePermission(requestParameters: SetRolePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setRolePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates a permission. <b>The permission ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * Upsert a Permission
     */
    async upsertPermissionRaw(requestParameters: UpsertPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling upsertPermission().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling upsertPermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user-svc/permission/{permissionId}`.replace(`{${"permissionId"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSvcUpserPermissionRequestToJSON(requestParameters['requestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates or updates a permission. <b>The permission ID must be prefixed by the callers username (email).</b> Eg. if the owner\'s email/username is `petstore-svc` the permission should look like `petstore-svc:pet:edit`.  Requires the `user-svc:permission:create` permission.
     * Upsert a Permission
     */
    async upsertPermission(requestParameters: UpsertPermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.upsertPermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
