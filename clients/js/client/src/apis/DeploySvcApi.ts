/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeploySvcErrorResponse,
  DeploySvcListDeploymentsResponse,
  DeploySvcSaveDeploymentRequest,
} from '../models/index';
import {
    DeploySvcErrorResponseFromJSON,
    DeploySvcErrorResponseToJSON,
    DeploySvcListDeploymentsResponseFromJSON,
    DeploySvcListDeploymentsResponseToJSON,
    DeploySvcSaveDeploymentRequestFromJSON,
    DeploySvcSaveDeploymentRequestToJSON,
} from '../models/index';

export interface ListDeploymentsRequest {
    body?: object;
}

export interface SaveDeploymentRequest {
    body?: DeploySvcSaveDeploymentRequest;
}

/**
 * 
 */
export class DeploySvcApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of deployments.
     * List Deployments
     */
    async listDeploymentsRaw(requestParameters: ListDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeploySvcListDeploymentsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/deploy-svc/deployments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeploySvcListDeploymentsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of deployments.
     * List Deployments
     */
    async listDeployments(requestParameters: ListDeploymentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeploySvcListDeploymentsResponse> {
        const response = await this.listDeploymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a deployment.
     * Save Deployment
     */
    async saveDeploymentRaw(requestParameters: SaveDeploymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/deploy-svc/deployment`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeploySvcSaveDeploymentRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save a deployment.
     * Save Deployment
     */
    async saveDeployment(requestParameters: SaveDeploymentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.saveDeploymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
