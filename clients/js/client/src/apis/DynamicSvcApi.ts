/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DynamicSvcCreateObjectRequest,
  DynamicSvcCreateObjectResponse,
  DynamicSvcDeleteObjectRequest,
  DynamicSvcErrorResponse,
  DynamicSvcQueryRequest,
  DynamicSvcQueryResponse,
  DynamicSvcUpdateObjectRequest,
  DynamicSvcUpsertObjectRequest,
  DynamicSvcUpsertObjectResponse,
} from '../models/index';
import {
    DynamicSvcCreateObjectRequestFromJSON,
    DynamicSvcCreateObjectRequestToJSON,
    DynamicSvcCreateObjectResponseFromJSON,
    DynamicSvcCreateObjectResponseToJSON,
    DynamicSvcDeleteObjectRequestFromJSON,
    DynamicSvcDeleteObjectRequestToJSON,
    DynamicSvcErrorResponseFromJSON,
    DynamicSvcErrorResponseToJSON,
    DynamicSvcQueryRequestFromJSON,
    DynamicSvcQueryRequestToJSON,
    DynamicSvcQueryResponseFromJSON,
    DynamicSvcQueryResponseToJSON,
    DynamicSvcUpdateObjectRequestFromJSON,
    DynamicSvcUpdateObjectRequestToJSON,
    DynamicSvcUpsertObjectRequestFromJSON,
    DynamicSvcUpsertObjectRequestToJSON,
    DynamicSvcUpsertObjectResponseFromJSON,
    DynamicSvcUpsertObjectResponseToJSON,
} from '../models/index';

export interface CreateObjectRequest {
    body: DynamicSvcCreateObjectRequest;
}

export interface DeleteObjectsRequest {
    body: DynamicSvcDeleteObjectRequest;
}

export interface QueryRequest {
    body?: DynamicSvcQueryRequest;
}

export interface UpdateObjectsRequest {
    body: DynamicSvcUpdateObjectRequest;
}

export interface UpsertObjectRequest {
    objectId: string;
    body: DynamicSvcUpsertObjectRequest;
}

/**
 * 
 */
export class DynamicSvcApi extends runtime.BaseAPI {

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async createObjectRaw(requestParameters: CreateObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicSvcCreateObjectResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dynamic-svc/object`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicSvcCreateObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcCreateObjectResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * Create a Generic Object
     */
    async createObject(requestParameters: CreateObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicSvcCreateObjectResponse> {
        const response = await this.createObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async deleteObjectsRaw(requestParameters: DeleteObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling deleteObjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dynamic-svc/objects/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicSvcDeleteObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.
     * Delete a Generic Object
     */
    async deleteObjects(requestParameters: DeleteObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Query Objects
     */
    async queryRaw(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicSvcQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dynamic-svc/objects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicSvcQueryRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * Query Objects
     */
    async query(requestParameters: QueryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicSvcQueryResponse> {
        const response = await this.queryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Objects
     */
    async updateObjectsRaw(requestParameters: UpdateObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateObjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dynamic-svc/objects/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicSvcUpdateObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * Update Objects
     */
    async updateObjects(requestParameters: UpdateObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateObjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async upsertObjectRaw(requestParameters: UpsertObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicSvcUpsertObjectResponse>> {
        if (requestParameters['objectId'] == null) {
            throw new runtime.RequiredError(
                'objectId',
                'Required parameter "objectId" was null or undefined when calling upsertObject().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling upsertObject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/dynamic-svc/object/{objectId}`.replace(`{${"objectId"}}`, encodeURIComponent(String(requestParameters['objectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicSvcUpsertObjectRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DynamicSvcUpsertObjectResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * Upsert a Generic Object
     */
    async upsertObject(requestParameters: UpsertObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicSvcUpsertObjectResponse> {
        const response = await this.upsertObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
