/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PromptSvcPromptStatus } from './PromptSvcPromptStatus';
import {
    PromptSvcPromptStatusFromJSON,
    PromptSvcPromptStatusFromJSONTyped,
    PromptSvcPromptStatusToJSON,
} from './PromptSvcPromptStatus';

/**
 * 
 * @export
 * @interface PromptSvcPrompt
 */
export interface PromptSvcPrompt {
    /**
     * CreatedAt is the time of the prompt creation.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    createdAt?: string;
    /**
     * Error that arose during prompt execution, if any.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    error?: string;
    /**
     * Id is the unique ID of the prompt.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    id?: string;
    /**
     * LastRun is the time of the last prompt run.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    lastRun?: string;
    /**
     * MaxRetries specified how many times the system should retry a prompt when it keeps erroring.
     * @type {number}
     * @memberof PromptSvcPrompt
     */
    maxRetries?: number;
    /**
     * ModelId is just the Singulatron internal ID of the model.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    modelId?: string;
    /**
     * Prompt is the message itself eg. "What's a banana?
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    prompt: string;
    /**
     * RunCount is the number of times the prompt was retried due to errors
     * @type {number}
     * @memberof PromptSvcPrompt
     */
    runCount?: number;
    /**
     * Status of the prompt.
     * @type {PromptSvcPromptStatus}
     * @memberof PromptSvcPrompt
     */
    status?: PromptSvcPromptStatus;
    /**
     * Sync drives whether prompt add request should wait and hang until
     * the prompt is done executing. By default the prompt just gets put on a queue
     * and the client will just subscribe to a Thread Stream.
     * For quick and dirty scripting however it's often times easier to do things syncronously.
     * In those cases set Sync to true.
     * @type {boolean}
     * @memberof PromptSvcPrompt
     */
    sync?: boolean;
    /**
     * Template of the prompt. Optional. If not present it's derived from ModelId.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    template?: string;
    /**
     * ThreadId is the ID of the thread a prompt belongs to.
     * Clients subscribe to Thread Streams to see the answer to a prompt,
     * or set `prompt.sync` to true for a blocking answer.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    threadId?: string;
    /**
     * UpdatedAt is the last time the prompt was updated.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    updatedAt?: string;
    /**
     * UserId contains the ID of the user who submitted the prompt.
     * @type {string}
     * @memberof PromptSvcPrompt
     */
    userId?: string;
}



/**
 * Check if a given object implements the PromptSvcPrompt interface.
 */
export function instanceOfPromptSvcPrompt(value: object): value is PromptSvcPrompt {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    return true;
}

export function PromptSvcPromptFromJSON(json: any): PromptSvcPrompt {
    return PromptSvcPromptFromJSONTyped(json, false);
}

export function PromptSvcPromptFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromptSvcPrompt {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'error': json['error'] == null ? undefined : json['error'],
        'id': json['id'] == null ? undefined : json['id'],
        'lastRun': json['lastRun'] == null ? undefined : json['lastRun'],
        'maxRetries': json['maxRetries'] == null ? undefined : json['maxRetries'],
        'modelId': json['modelId'] == null ? undefined : json['modelId'],
        'prompt': json['prompt'],
        'runCount': json['runCount'] == null ? undefined : json['runCount'],
        'status': json['status'] == null ? undefined : PromptSvcPromptStatusFromJSON(json['status']),
        'sync': json['sync'] == null ? undefined : json['sync'],
        'template': json['template'] == null ? undefined : json['template'],
        'threadId': json['threadId'] == null ? undefined : json['threadId'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'userId': json['userId'] == null ? undefined : json['userId'],
    };
}

export function PromptSvcPromptToJSON(value?: PromptSvcPrompt | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'createdAt': value['createdAt'],
        'error': value['error'],
        'id': value['id'],
        'lastRun': value['lastRun'],
        'maxRetries': value['maxRetries'],
        'modelId': value['modelId'],
        'prompt': value['prompt'],
        'runCount': value['runCount'],
        'status': PromptSvcPromptStatusToJSON(value['status']),
        'sync': value['sync'],
        'template': value['template'],
        'threadId': value['threadId'],
        'updatedAt': value['updatedAt'],
        'userId': value['userId'],
    };
}

