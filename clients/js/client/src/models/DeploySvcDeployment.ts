/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeploySvcDeploymentStrategy } from './DeploySvcDeploymentStrategy';
import {
    DeploySvcDeploymentStrategyFromJSON,
    DeploySvcDeploymentStrategyFromJSONTyped,
    DeploySvcDeploymentStrategyToJSON,
} from './DeploySvcDeploymentStrategy';
import type { DeploySvcAutoScalingConfig } from './DeploySvcAutoScalingConfig';
import {
    DeploySvcAutoScalingConfigFromJSON,
    DeploySvcAutoScalingConfigFromJSONTyped,
    DeploySvcAutoScalingConfigToJSON,
} from './DeploySvcAutoScalingConfig';
import type { DeploySvcTargetRegion } from './DeploySvcTargetRegion';
import {
    DeploySvcTargetRegionFromJSON,
    DeploySvcTargetRegionFromJSONTyped,
    DeploySvcTargetRegionToJSON,
} from './DeploySvcTargetRegion';
import type { DeploySvcResourceLimits } from './DeploySvcResourceLimits';
import {
    DeploySvcResourceLimitsFromJSON,
    DeploySvcResourceLimitsFromJSONTyped,
    DeploySvcResourceLimitsToJSON,
} from './DeploySvcResourceLimits';

/**
 * 
 * @export
 * @interface DeploySvcDeployment
 */
export interface DeploySvcDeployment {
    /**
     * Optional: Auto-scaling rules
     * @type {DeploySvcAutoScalingConfig}
     * @memberof DeploySvcDeployment
     */
    autoScaling?: DeploySvcAutoScalingConfig;
    /**
     * ID of the deployment (e.g., "depl_dbOdi5eLQK")
     * @type {string}
     * @memberof DeploySvcDeployment
     */
    id?: string;
    /**
     * Number of container instances to run
     * @type {number}
     * @memberof DeploySvcDeployment
     */
    replicas?: number;
    /**
     * Resource requirements for each replica
     * @type {DeploySvcResourceLimits}
     * @memberof DeploySvcDeployment
     */
    resources?: DeploySvcResourceLimits;
    /**
     * The User Svc slug of the service that is being deployed.
     * @type {string}
     * @memberof DeploySvcDeployment
     */
    serviceSlug: string;
    /**
     * Deployment strategy (e.g., rolling update)
     * @type {DeploySvcDeploymentStrategy}
     * @memberof DeploySvcDeployment
     */
    strategy?: DeploySvcDeploymentStrategy;
    /**
     * Target deployment regions or clusters
     * @type {Array<DeploySvcTargetRegion>}
     * @memberof DeploySvcDeployment
     */
    targetRegions?: Array<DeploySvcTargetRegion>;
}

/**
 * Check if a given object implements the DeploySvcDeployment interface.
 */
export function instanceOfDeploySvcDeployment(value: object): value is DeploySvcDeployment {
    if (!('serviceSlug' in value) || value['serviceSlug'] === undefined) return false;
    return true;
}

export function DeploySvcDeploymentFromJSON(json: any): DeploySvcDeployment {
    return DeploySvcDeploymentFromJSONTyped(json, false);
}

export function DeploySvcDeploymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeploySvcDeployment {
    if (json == null) {
        return json;
    }
    return {
        
        'autoScaling': json['autoScaling'] == null ? undefined : DeploySvcAutoScalingConfigFromJSON(json['autoScaling']),
        'id': json['id'] == null ? undefined : json['id'],
        'replicas': json['replicas'] == null ? undefined : json['replicas'],
        'resources': json['resources'] == null ? undefined : DeploySvcResourceLimitsFromJSON(json['resources']),
        'serviceSlug': json['serviceSlug'],
        'strategy': json['strategy'] == null ? undefined : DeploySvcDeploymentStrategyFromJSON(json['strategy']),
        'targetRegions': json['targetRegions'] == null ? undefined : ((json['targetRegions'] as Array<any>).map(DeploySvcTargetRegionFromJSON)),
    };
}

export function DeploySvcDeploymentToJSON(value?: DeploySvcDeployment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'autoScaling': DeploySvcAutoScalingConfigToJSON(value['autoScaling']),
        'id': value['id'],
        'replicas': value['replicas'],
        'resources': DeploySvcResourceLimitsToJSON(value['resources']),
        'serviceSlug': value['serviceSlug'],
        'strategy': DeploySvcDeploymentStrategyToJSON(value['strategy']),
        'targetRegions': value['targetRegions'] == null ? undefined : ((value['targetRegions'] as Array<any>).map(DeploySvcTargetRegionToJSON)),
    };
}

