/* tslint:disable */
/* eslint-disable */
/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RegistrySvcRegisterServiceInstanceRequest
 */
export interface RegistrySvcRegisterServiceInstanceRequest {
    /**
     * Host of the service instance address. Required if URL is not provided
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    host?: string;
    /**
     * IP of the service instance address. Optional: to register by IP instead of host
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    ip?: string;
    /**
     * Path of the service instance address. Optional (e.g., "/api")
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    path?: string;
    /**
     * Port of the service instance address. Required if URL is not provided
     * @type {number}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    port?: number;
    /**
     * Scheme of the service instance address. Required if URL is not provided.
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    scheme?: string;
    /**
     * The User Svc slug of the service whose instance is being registered.
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    slug: string;
    /**
     * Full address URL of the service instance.
     * @type {string}
     * @memberof RegistrySvcRegisterServiceInstanceRequest
     */
    url?: string;
}

/**
 * Check if a given object implements the RegistrySvcRegisterServiceInstanceRequest interface.
 */
export function instanceOfRegistrySvcRegisterServiceInstanceRequest(value: object): value is RegistrySvcRegisterServiceInstanceRequest {
    if (!('slug' in value) || value['slug'] === undefined) return false;
    return true;
}

export function RegistrySvcRegisterServiceInstanceRequestFromJSON(json: any): RegistrySvcRegisterServiceInstanceRequest {
    return RegistrySvcRegisterServiceInstanceRequestFromJSONTyped(json, false);
}

export function RegistrySvcRegisterServiceInstanceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrySvcRegisterServiceInstanceRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'host': json['host'] == null ? undefined : json['host'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'path': json['path'] == null ? undefined : json['path'],
        'port': json['port'] == null ? undefined : json['port'],
        'scheme': json['scheme'] == null ? undefined : json['scheme'],
        'slug': json['slug'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function RegistrySvcRegisterServiceInstanceRequestToJSON(value?: RegistrySvcRegisterServiceInstanceRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'host': value['host'],
        'ip': value['ip'],
        'path': value['path'],
        'port': value['port'],
        'scheme': value['scheme'],
        'slug': value['slug'],
        'url': value['url'],
    };
}

