/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { PromptSvcAddPromptRequest } from '../model/promptSvcAddPromptRequest';
import { PromptSvcAddPromptResponse } from '../model/promptSvcAddPromptResponse';
import { PromptSvcListPromptsRequest } from '../model/promptSvcListPromptsRequest';
import { PromptSvcListPromptsResponse } from '../model/promptSvcListPromptsResponse';
import { PromptSvcRemovePromptRequest } from '../model/promptSvcRemovePromptRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum PromptSvcApiApiKeys {
    BearerAuth = 0
}
export declare class PromptSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PromptSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Adds a new prompt to the prompt queue and either waits for the response (if `sync` is set to true), or returns immediately.
     * @summary Add Prompt
     * @param request Add Prompt Request
     */
    addPrompt(request: PromptSvcAddPromptRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PromptSvcAddPromptResponse;
    }>;
    /**
     * List prompts that satisfy a query.
     * @summary List Prompts
     * @param request List Prompts Request
     */
    listPrompts(request?: PromptSvcListPromptsRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: PromptSvcListPromptsResponse;
    }>;
    /**
     * Remove a prompt by ID.
     * @summary Remove Prompt
     * @param request Remove Prompt Request
     */
    removePrompt(request: PromptSvcRemovePromptRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Subscribe to prompt responses by thread via Server-Sent Events (SSE)
     * @summary Subscribe to Prompt Responses by Thread
     * @param threadId Thread ID
     */
    subscribeToPromptResponses(threadId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
}
