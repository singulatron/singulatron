/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { RegistrySvcListNodesResponse } from '../model/registrySvcListNodesResponse';
import { RegistrySvcListServiceInstancesResponse } from '../model/registrySvcListServiceInstancesResponse';
import { RegistrySvcRegisterServiceInstanceRequest } from '../model/registrySvcRegisterServiceInstanceRequest';
import { RegistrySvcSaveServiceDefinitionRequest } from '../model/registrySvcSaveServiceDefinitionRequest';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum RegistrySvcApiApiKeys {
    BearerAuth = 0
}
export declare class RegistrySvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: RegistrySvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Deletes a registered service definition based on the service ID.
     * @summary Delete Service Definition
     * @param id Service Definition ID
     */
    deleteServiceDefinition(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Retrieve a list of nodes.
     * @summary List Nodes
     * @param body List Registrys Request
     */
    listNodes(body?: object, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcListNodesResponse;
    }>;
    /**
     * Retrieves a list of all registered service instances or filters them by specific criteria (e.g., host, IP).
     * @summary List Service Instances
     * @param scheme Scheme to filter by
     * @param ip IP to filter by
     * @param host Host to filter by
     * @param ip2 IP to filter by
     * @param id Id to filter by
     */
    queryServiceInstances(scheme?: string, ip?: string, host?: string, ip2?: string, id?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: RegistrySvcListServiceInstancesResponse;
    }>;
    /**
     * Registers a new service instance, associating an service instance address with a slug acquired from the bearer token.
     * @summary Register Service Instance
     * @param request Register Service Instance Request
     */
    registerServiceInstance(request: RegistrySvcRegisterServiceInstanceRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Removes a registered service instance based on the service ID.
     * @summary Remove Service Instance
     * @param id Service Instance ID
     */
    removeServiceInstance(id: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     * Registers a new service definition, associating an service definition address with a slug acquired from the bearer token.
     * @summary Register Service Definition
     * @param request Register Service Definition Request
     */
    saveServiceDefinition(request: RegistrySvcSaveServiceDefinitionRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
}
