/**
 * Superplatform
 * On-premise AI platform and microservices ecosystem.
 *
 * The version of the OpenAPI document: 0.2
 * Contact: sales@singulatron.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { DynamicSvcCreateObjectRequest } from '../model/dynamicSvcCreateObjectRequest';
import { DynamicSvcCreateObjectResponse } from '../model/dynamicSvcCreateObjectResponse';
import { DynamicSvcDeleteObjectRequest } from '../model/dynamicSvcDeleteObjectRequest';
import { DynamicSvcQueryRequest } from '../model/dynamicSvcQueryRequest';
import { DynamicSvcQueryResponse } from '../model/dynamicSvcQueryResponse';
import { DynamicSvcUpdateObjectRequest } from '../model/dynamicSvcUpdateObjectRequest';
import { DynamicSvcUpsertObjectRequest } from '../model/dynamicSvcUpsertObjectRequest';
import { DynamicSvcUpsertObjectResponse } from '../model/dynamicSvcUpsertObjectResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum DynamicSvcApiApiKeys {
    BearerAuth = 0
}
export declare class DynamicSvcApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DynamicSvcApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Creates a new object with the provided details. Requires authorization and user authentication.
     * @summary Create a Generic Object
     * @param body Create request payload
     */
    createObject(body: DynamicSvcCreateObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DynamicSvcCreateObjectResponse;
    }>;
    /**
     * Removes a dynamic object from the system based on the provided conditions. Requires authorization and user authentication.
     * @summary Delete a Generic Object
     * @param body Delete request payload
     */
    deleteObjects(body: DynamicSvcDeleteObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Retrieves objects from a specified table based on search criteria. Requires authorization and user authentication.   Use helper functions in your respective client library such as condition constructors (`equal`, `contains`, `startsWith`) and field selectors (`field`, `fields`, `id`) for easier access.
     * @summary Query Objects
     * @param body Query Request
     */
    query(body?: DynamicSvcQueryRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DynamicSvcQueryResponse;
    }>;
    /**
     * Updates objects in a specified table based on provided conditions. Requires authorization and user authentication.
     * @summary Update Objects
     * @param body Update request payload
     */
    updateObjects(body: DynamicSvcUpdateObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: object;
    }>;
    /**
     * Creates a new dynamic object or updates an existing one based on the provided data. Requires authorization and user authentication.
     * @summary Upsert a Generic Object
     * @param objectId Object ID
     * @param body Upsert request payload
     */
    upsertObject(objectId: string, body: DynamicSvcUpsertObjectRequest, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: DynamicSvcUpsertObjectResponse;
    }>;
}
